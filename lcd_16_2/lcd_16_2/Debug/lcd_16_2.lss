
lcd_16_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000628  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  000006c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ff  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098b  00000000  00000000  00001c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a77  00000000  00000000  00002606  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00003080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a4  00000000  00000000  00003290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dda  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000450e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <main>
  8a:	0c 94 12 03 	jmp	0x624	; 0x624 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_init>:
 *  Author: remon
 */ 
#include "DIO.h"

void BUTTON_init(unsigned char port , unsigned char pin){
	DIO_set_bit_dir(port,pin,0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_set_bit_dir>
  98:	08 95       	ret

0000009a <BUTTON_read>:
}
unsigned char BUTTON_read(unsigned char port , unsigned char pin){
	unsigned char value;
	value=DIO_read_bit(port,pin);
  9a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_read_bit>
	return value;
  9e:	08 95       	ret

000000a0 <DIO_set_bit_dir>:
			break;
			case 'C':
				TOG_BIT(PORTC,bit);
			break;
			case 'D':
				TOG_BIT(PORTD,bit);
  a0:	82 34       	cpi	r24, 0x42	; 66
  a2:	19 f1       	breq	.+70     	; 0xea <DIO_set_bit_dir+0x4a>
  a4:	18 f4       	brcc	.+6      	; 0xac <DIO_set_bit_dir+0xc>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	39 f0       	breq	.+14     	; 0xb8 <DIO_set_bit_dir+0x18>
  aa:	08 95       	ret
  ac:	83 34       	cpi	r24, 0x43	; 67
  ae:	b1 f1       	breq	.+108    	; 0x11c <DIO_set_bit_dir+0x7c>
  b0:	84 34       	cpi	r24, 0x44	; 68
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_set_bit_dir+0x16>
  b4:	4c c0       	rjmp	.+152    	; 0x14e <DIO_set_bit_dir+0xae>
  b6:	08 95       	ret
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	59 f4       	brne	.+22     	; 0xd2 <DIO_set_bit_dir+0x32>
  bc:	2a b3       	in	r18, 0x1a	; 26
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_set_bit_dir+0x28>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_set_bit_dir+0x24>
  cc:	82 2b       	or	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_set_bit_dir+0x3e>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_set_bit_dir+0x3a>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	08 95       	ret
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <DIO_set_bit_dir+0x64>
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_set_bit_dir+0x5a>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_set_bit_dir+0x56>
  fe:	82 2b       	or	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_set_bit_dir+0x70>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_set_bit_dir+0x6c>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	59 f4       	brne	.+22     	; 0x136 <DIO_set_bit_dir+0x96>
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_set_bit_dir+0x8c>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_set_bit_dir+0x88>
 130:	82 2b       	or	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_set_bit_dir+0xa2>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_set_bit_dir+0x9e>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	84 bb       	out	0x14, r24	; 20
 14c:	08 95       	ret
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	59 f4       	brne	.+22     	; 0x168 <DIO_set_bit_dir+0xc8>
 152:	21 b3       	in	r18, 0x11	; 17
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_set_bit_dir+0xbe>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_set_bit_dir+0xba>
 162:	82 2b       	or	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret
 168:	21 b3       	in	r18, 0x11	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_set_bit_dir+0xd4>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_set_bit_dir+0xd0>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	08 95       	ret

00000180 <DIO_read_bit>:
 180:	82 34       	cpi	r24, 0x42	; 66
 182:	f9 f0       	breq	.+62     	; 0x1c2 <DIO_read_bit+0x42>
 184:	18 f4       	brcc	.+6      	; 0x18c <DIO_read_bit+0xc>
 186:	81 34       	cpi	r24, 0x41	; 65
 188:	39 f0       	breq	.+14     	; 0x198 <DIO_read_bit+0x18>
 18a:	59 c0       	rjmp	.+178    	; 0x23e <DIO_read_bit+0xbe>
 18c:	83 34       	cpi	r24, 0x43	; 67
 18e:	71 f1       	breq	.+92     	; 0x1ec <DIO_read_bit+0x6c>
 190:	84 34       	cpi	r24, 0x44	; 68
 192:	09 f4       	brne	.+2      	; 0x196 <DIO_read_bit+0x16>
 194:	40 c0       	rjmp	.+128    	; 0x216 <DIO_read_bit+0x96>
 196:	53 c0       	rjmp	.+166    	; 0x23e <DIO_read_bit+0xbe>
 198:	49 b3       	in	r20, 0x19	; 25
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	9c 01       	movw	r18, r24
 1a0:	06 2e       	mov	r0, r22
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_read_bit+0x28>
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_read_bit+0x24>
 1ac:	84 2f       	mov	r24, r20
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	82 23       	and	r24, r18
 1b2:	93 23       	and	r25, r19
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_read_bit+0x3a>
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_read_bit+0x36>
 1be:	98 2f       	mov	r25, r24
 1c0:	3e c0       	rjmp	.+124    	; 0x23e <DIO_read_bit+0xbe>
 1c2:	46 b3       	in	r20, 0x16	; 22
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	9c 01       	movw	r18, r24
 1ca:	06 2e       	mov	r0, r22
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_read_bit+0x52>
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_read_bit+0x4e>
 1d6:	84 2f       	mov	r24, r20
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	82 23       	and	r24, r18
 1dc:	93 23       	and	r25, r19
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_read_bit+0x64>
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_read_bit+0x60>
 1e8:	98 2f       	mov	r25, r24
 1ea:	29 c0       	rjmp	.+82     	; 0x23e <DIO_read_bit+0xbe>
 1ec:	43 b3       	in	r20, 0x13	; 19
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	9c 01       	movw	r18, r24
 1f4:	06 2e       	mov	r0, r22
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_read_bit+0x7c>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_read_bit+0x78>
 200:	84 2f       	mov	r24, r20
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	82 23       	and	r24, r18
 206:	93 23       	and	r25, r19
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_read_bit+0x8e>
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_read_bit+0x8a>
 212:	98 2f       	mov	r25, r24
 214:	14 c0       	rjmp	.+40     	; 0x23e <DIO_read_bit+0xbe>
 216:	40 b3       	in	r20, 0x10	; 16
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	9c 01       	movw	r18, r24
 21e:	06 2e       	mov	r0, r22
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_read_bit+0xa6>
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_read_bit+0xa2>
 22a:	84 2f       	mov	r24, r20
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	82 23       	and	r24, r18
 230:	93 23       	and	r25, r19
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_read_bit+0xb8>
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_read_bit+0xb4>
 23c:	98 2f       	mov	r25, r24
 23e:	89 2f       	mov	r24, r25
 240:	08 95       	ret

00000242 <DIO_write_bit>:
 242:	82 34       	cpi	r24, 0x42	; 66
 244:	19 f1       	breq	.+70     	; 0x28c <DIO_write_bit+0x4a>
 246:	18 f4       	brcc	.+6      	; 0x24e <DIO_write_bit+0xc>
 248:	81 34       	cpi	r24, 0x41	; 65
 24a:	39 f0       	breq	.+14     	; 0x25a <DIO_write_bit+0x18>
 24c:	08 95       	ret
 24e:	83 34       	cpi	r24, 0x43	; 67
 250:	b1 f1       	breq	.+108    	; 0x2be <DIO_write_bit+0x7c>
 252:	84 34       	cpi	r24, 0x44	; 68
 254:	09 f4       	brne	.+2      	; 0x258 <DIO_write_bit+0x16>
 256:	4c c0       	rjmp	.+152    	; 0x2f0 <DIO_write_bit+0xae>
 258:	08 95       	ret
 25a:	41 30       	cpi	r20, 0x01	; 1
 25c:	59 f4       	brne	.+22     	; 0x274 <DIO_write_bit+0x32>
 25e:	2b b3       	in	r18, 0x1b	; 27
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_write_bit+0x28>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_write_bit+0x24>
 26e:	82 2b       	or	r24, r18
 270:	8b bb       	out	0x1b, r24	; 27
 272:	08 95       	ret
 274:	2b b3       	in	r18, 0x1b	; 27
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_write_bit+0x3e>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_write_bit+0x3a>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	8b bb       	out	0x1b, r24	; 27
 28a:	08 95       	ret
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	59 f4       	brne	.+22     	; 0x2a6 <DIO_write_bit+0x64>
 290:	28 b3       	in	r18, 0x18	; 24
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_write_bit+0x5a>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_write_bit+0x56>
 2a0:	82 2b       	or	r24, r18
 2a2:	88 bb       	out	0x18, r24	; 24
 2a4:	08 95       	ret
 2a6:	28 b3       	in	r18, 0x18	; 24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_write_bit+0x70>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_write_bit+0x6c>
 2b6:	80 95       	com	r24
 2b8:	82 23       	and	r24, r18
 2ba:	88 bb       	out	0x18, r24	; 24
 2bc:	08 95       	ret
 2be:	41 30       	cpi	r20, 0x01	; 1
 2c0:	59 f4       	brne	.+22     	; 0x2d8 <DIO_write_bit+0x96>
 2c2:	25 b3       	in	r18, 0x15	; 21
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_write_bit+0x8c>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_write_bit+0x88>
 2d2:	82 2b       	or	r24, r18
 2d4:	85 bb       	out	0x15, r24	; 21
 2d6:	08 95       	ret
 2d8:	25 b3       	in	r18, 0x15	; 21
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_write_bit+0xa2>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_write_bit+0x9e>
 2e8:	80 95       	com	r24
 2ea:	82 23       	and	r24, r18
 2ec:	85 bb       	out	0x15, r24	; 21
 2ee:	08 95       	ret
 2f0:	41 30       	cpi	r20, 0x01	; 1
 2f2:	59 f4       	brne	.+22     	; 0x30a <DIO_write_bit+0xc8>
 2f4:	22 b3       	in	r18, 0x12	; 18
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_write_bit+0xbe>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_write_bit+0xba>
 304:	82 2b       	or	r24, r18
 306:	82 bb       	out	0x12, r24	; 18
 308:	08 95       	ret
 30a:	22 b3       	in	r18, 0x12	; 18
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_write_bit+0xd4>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_write_bit+0xd0>
 31a:	80 95       	com	r24
 31c:	82 23       	and	r24, r18
 31e:	82 bb       	out	0x12, r24	; 18
 320:	08 95       	ret

00000322 <DIO_set_port_dir>:
			break;
	}
}
void DIO_set_port_dir(unsigned char port , unsigned char dir){
	switch(port){
 322:	82 34       	cpi	r24, 0x42	; 66
 324:	81 f0       	breq	.+32     	; 0x346 <DIO_set_port_dir+0x24>
 326:	18 f4       	brcc	.+6      	; 0x32e <DIO_set_port_dir+0xc>
 328:	81 34       	cpi	r24, 0x41	; 65
 32a:	31 f0       	breq	.+12     	; 0x338 <DIO_set_port_dir+0x16>
 32c:	08 95       	ret
 32e:	83 34       	cpi	r24, 0x43	; 67
 330:	89 f0       	breq	.+34     	; 0x354 <DIO_set_port_dir+0x32>
 332:	84 34       	cpi	r24, 0x44	; 68
 334:	b1 f0       	breq	.+44     	; 0x362 <DIO_set_port_dir+0x40>
 336:	08 95       	ret
		case 'A':
		if (dir==1){
 338:	61 30       	cpi	r22, 0x01	; 1
 33a:	19 f4       	brne	.+6      	; 0x342 <DIO_set_port_dir+0x20>
			DDRA=0xff;
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	8a bb       	out	0x1a, r24	; 26
 340:	08 95       	ret
		}
		else{
			DDRA=0x00;
 342:	1a ba       	out	0x1a, r1	; 26
 344:	08 95       	ret
		}
		break;
		case 'B':
		if (dir==1){
 346:	61 30       	cpi	r22, 0x01	; 1
 348:	19 f4       	brne	.+6      	; 0x350 <DIO_set_port_dir+0x2e>
			DDRB=0xff;
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	87 bb       	out	0x17, r24	; 23
 34e:	08 95       	ret
		}
		else{
			DDRB=0x00;
 350:	17 ba       	out	0x17, r1	; 23
 352:	08 95       	ret
		}
		break;
		case 'C':
		if (dir==1){
 354:	61 30       	cpi	r22, 0x01	; 1
 356:	19 f4       	brne	.+6      	; 0x35e <DIO_set_port_dir+0x3c>
			DDRC=0xff;
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	84 bb       	out	0x14, r24	; 20
 35c:	08 95       	ret
		}
		else{
			DDRC=0x00;
 35e:	14 ba       	out	0x14, r1	; 20
 360:	08 95       	ret
		}
		break;
		case 'D':
		if (dir==1){
 362:	61 30       	cpi	r22, 0x01	; 1
 364:	19 f4       	brne	.+6      	; 0x36c <DIO_set_port_dir+0x4a>
			DDRD=0xff;
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	81 bb       	out	0x11, r24	; 17
 36a:	08 95       	ret
		}
		else{
			DDRD=0x00;
 36c:	11 ba       	out	0x11, r1	; 17
 36e:	08 95       	ret

00000370 <DIO_write_port>:
		}
		break;
	}
}
void DIO_write_port(unsigned char port, unsigned char value){
	switch(port){
 370:	82 34       	cpi	r24, 0x42	; 66
 372:	59 f0       	breq	.+22     	; 0x38a <DIO_write_port+0x1a>
 374:	18 f4       	brcc	.+6      	; 0x37c <DIO_write_port+0xc>
 376:	81 34       	cpi	r24, 0x41	; 65
 378:	31 f0       	breq	.+12     	; 0x386 <DIO_write_port+0x16>
 37a:	08 95       	ret
 37c:	83 34       	cpi	r24, 0x43	; 67
 37e:	39 f0       	breq	.+14     	; 0x38e <DIO_write_port+0x1e>
 380:	84 34       	cpi	r24, 0x44	; 68
 382:	39 f0       	breq	.+14     	; 0x392 <DIO_write_port+0x22>
 384:	08 95       	ret
		case 'A':
			PORTA=value;
 386:	6b bb       	out	0x1b, r22	; 27
			break;
 388:	08 95       	ret
		case 'B':
			PORTB=value;
 38a:	68 bb       	out	0x18, r22	; 24
			break;
 38c:	08 95       	ret
		case 'C':
			PORTC=value;
 38e:	65 bb       	out	0x15, r22	; 21
			break;
 390:	08 95       	ret
		case 'D':
			PORTD=value;
 392:	62 bb       	out	0x12, r22	; 18
 394:	08 95       	ret

00000396 <LCD_send_falling_edge>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	82 e4       	ldi	r24, 0x42	; 66
 39c:	0e 94 21 01 	call	0x242	; 0x242 <DIO_write_bit>
 3a0:	8f e9       	ldi	r24, 0x9F	; 159
 3a2:	9f e0       	ldi	r25, 0x0F	; 15
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_send_falling_edge+0xe>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_send_falling_edge+0x14>
 3aa:	00 00       	nop
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	82 e4       	ldi	r24, 0x42	; 66
 3b2:	0e 94 21 01 	call	0x242	; 0x242 <DIO_write_bit>
 3b6:	8f e9       	ldi	r24, 0x9F	; 159
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_send_falling_edge+0x24>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_send_falling_edge+0x2a>
 3c0:	00 00       	nop
 3c2:	08 95       	ret

000003c4 <LCD_send_cmd>:
 3c4:	68 2f       	mov	r22, r24
 3c6:	81 e4       	ldi	r24, 0x41	; 65
 3c8:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_write_port>
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	82 e4       	ldi	r24, 0x42	; 66
 3d2:	0e 94 21 01 	call	0x242	; 0x242 <DIO_write_bit>
 3d6:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_send_falling_edge>
 3da:	08 95       	ret

000003dc <LCD_init>:
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	81 ee       	ldi	r24, 0xE1	; 225
 3e0:	94 e0       	ldi	r25, 0x04	; 4
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <LCD_init+0x6>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_init+0x10>
 3ec:	00 00       	nop
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e4       	ldi	r24, 0x41	; 65
 3f2:	0e 94 91 01 	call	0x322	; 0x322 <DIO_set_port_dir>
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	82 e4       	ldi	r24, 0x42	; 66
 3fc:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_set_bit_dir>
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	82 e4       	ldi	r24, 0x42	; 66
 406:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_set_bit_dir>
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	82 e4       	ldi	r24, 0x42	; 66
 410:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_set_bit_dir>
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	62 e0       	ldi	r22, 0x02	; 2
 418:	82 e4       	ldi	r24, 0x42	; 66
 41a:	0e 94 21 01 	call	0x242	; 0x242 <DIO_write_bit>
 41e:	88 e3       	ldi	r24, 0x38	; 56
 420:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_send_cmd>
 424:	8f ec       	ldi	r24, 0xCF	; 207
 426:	97 e0       	ldi	r25, 0x07	; 7
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	8e e0       	ldi	r24, 0x0E	; 14
 432:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_send_cmd>
 436:	8f ec       	ldi	r24, 0xCF	; 207
 438:	97 e0       	ldi	r25, 0x07	; 7
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_send_cmd>
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	9e e4       	ldi	r25, 0x4E	; 78
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	86 e0       	ldi	r24, 0x06	; 6
 456:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_send_cmd>
 45a:	8f ec       	ldi	r24, 0xCF	; 207
 45c:	97 e0       	ldi	r25, 0x07	; 7
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 464:	00 00       	nop
 466:	08 95       	ret

00000468 <LCD_send_char>:
 468:	68 2f       	mov	r22, r24
 46a:	81 e4       	ldi	r24, 0x41	; 65
 46c:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_write_port>
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	82 e4       	ldi	r24, 0x42	; 66
 476:	0e 94 21 01 	call	0x242	; 0x242 <DIO_write_bit>
 47a:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_send_falling_edge>
 47e:	08 95       	ret

00000480 <LCD_send_string>:
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
 486:	03 c0       	rjmp	.+6      	; 0x48e <LCD_send_string+0xe>
 488:	0e 94 34 02 	call	0x468	; 0x468 <LCD_send_char>
 48c:	21 96       	adiw	r28, 0x01	; 1
 48e:	88 81       	ld	r24, Y
 490:	81 11       	cpse	r24, r1
 492:	fa cf       	rjmp	.-12     	; 0x488 <LCD_send_string+0x8>
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <LCD_move_cursor>:
	LCD_send_cmd(CLR_SCREEN);
	_delay_ms(10);
}
void LCD_move_cursor(char row,char col){
		char data ;
		if(row>2||row<1||col>16||col<1)
 49a:	9f ef       	ldi	r25, 0xFF	; 255
 49c:	98 0f       	add	r25, r24
 49e:	92 30       	cpi	r25, 0x02	; 2
 4a0:	70 f4       	brcc	.+28     	; 0x4be <LCD_move_cursor+0x24>
 4a2:	61 31       	cpi	r22, 0x11	; 17
 4a4:	70 f4       	brcc	.+28     	; 0x4c2 <LCD_move_cursor+0x28>
 4a6:	66 23       	and	r22, r22
 4a8:	71 f0       	breq	.+28     	; 0x4c6 <LCD_move_cursor+0x2c>
		{
			data=0x80;
		}
		else if(row==1)
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	19 f4       	brne	.+6      	; 0x4b4 <LCD_move_cursor+0x1a>
		{
			data=0x80+col-1 ;
 4ae:	2f e7       	ldi	r18, 0x7F	; 127
 4b0:	26 0f       	add	r18, r22
 4b2:	0a c0       	rjmp	.+20     	; 0x4c8 <LCD_move_cursor+0x2e>
		}
		else if (row==2)
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	41 f4       	brne	.+16     	; 0x4c8 <LCD_move_cursor+0x2e>
		{
			data=0xc0+col-1;
 4b8:	2f eb       	ldi	r18, 0xBF	; 191
 4ba:	26 0f       	add	r18, r22
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <LCD_move_cursor+0x2e>
}
void LCD_move_cursor(char row,char col){
		char data ;
		if(row>2||row<1||col>16||col<1)
		{
			data=0x80;
 4be:	20 e8       	ldi	r18, 0x80	; 128
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <LCD_move_cursor+0x2e>
 4c2:	20 e8       	ldi	r18, 0x80	; 128
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <LCD_move_cursor+0x2e>
 4c6:	20 e8       	ldi	r18, 0x80	; 128
		}
		else if (row==2)
		{
			data=0xc0+col-1;
		}
		LCD_send_cmd(data);
 4c8:	82 2f       	mov	r24, r18
 4ca:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_send_cmd>
 4ce:	8f ec       	ldi	r24, 0xCF	; 207
 4d0:	97 e0       	ldi	r25, 0x07	; 7
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <LCD_move_cursor+0x38>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <LCD_move_cursor+0x3e>
 4d8:	00 00       	nop
 4da:	08 95       	ret

000004dc <LED_init>:
 *  Author: remon
 */
#include "DIO.h" 

void LED_init(unsigned char port , unsigned char pin){
	DIO_set_bit_dir(port,pin,1);
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_set_bit_dir>
 4e2:	08 95       	ret

000004e4 <LED_on>:
}
void LED_on(unsigned char port , unsigned char pin){
	DIO_write_bit(port,pin,1);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	0e 94 21 01 	call	0x242	; 0x242 <DIO_write_bit>
 4ea:	08 95       	ret

000004ec <LED_off>:
}
void LED_off(unsigned char port , unsigned char pin){
	DIO_write_bit(port,pin,0);
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	0e 94 21 01 	call	0x242	; 0x242 <DIO_write_bit>
 4f2:	08 95       	ret

000004f4 <main>:
#include "LCD.h"
#include "BUTTON.h"
int counter=0;
int main(void)
{
    BUTTON_init('D',0);
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	84 e4       	ldi	r24, 0x44	; 68
 4f8:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_init>
	BUTTON_init('D',2);
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	84 e4       	ldi	r24, 0x44	; 68
 500:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_init>
	LED_init('D',1);
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	84 e4       	ldi	r24, 0x44	; 68
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LED_init>
	LED_on('D',1);
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	84 e4       	ldi	r24, 0x44	; 68
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LED_on>
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	84 e3       	ldi	r24, 0x34	; 52
 520:	9c e0       	ldi	r25, 0x0C	; 12
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x2e>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x38>
 52c:	00 00       	nop
	_delay_ms(500);
	char cursor=11;
	unsigned char btn;
	LCD_init();
 52e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_init>
	LCD_send_string("counter = ");
 532:	80 e6       	ldi	r24, 0x60	; 96
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 40 02 	call	0x480	; 0x480 <LCD_send_string>
	while (1) 
    {
	btn=BUTTON_read('D',0);
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	84 e4       	ldi	r24, 0x44	; 68
 53e:	0e 94 4d 00 	call	0x9a	; 0x9a <BUTTON_read>
	if(btn==1){
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	09 f5       	brne	.+66     	; 0x588 <main+0x94>
		LED_on('D',1);
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	84 e4       	ldi	r24, 0x44	; 68
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LED_on>
		if(counter<99){
 552:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 556:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 55a:	83 36       	cpi	r24, 0x63	; 99
 55c:	91 05       	cpc	r25, r1
 55e:	34 f4       	brge	.+12     	; 0x56c <main+0x78>
			counter++;
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 566:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 56a:	04 c0       	rjmp	.+8      	; 0x574 <main+0x80>
		}
		else
		{
			counter=0;
 56c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x1>
 570:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 574:	2f e7       	ldi	r18, 0x7F	; 127
 576:	8a e1       	ldi	r24, 0x1A	; 26
 578:	96 e0       	ldi	r25, 0x06	; 6
 57a:	21 50       	subi	r18, 0x01	; 1
 57c:	80 40       	sbci	r24, 0x00	; 0
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <main+0x86>
 582:	00 c0       	rjmp	.+0      	; 0x584 <main+0x90>
 584:	00 00       	nop
 586:	06 c0       	rjmp	.+12     	; 0x594 <main+0xa0>
		}
		_delay_ms(250);	
	}
	else{
		LED_off('D',1);
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	84 e4       	ldi	r24, 0x44	; 68
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 76 02 	call	0x4ec	; 0x4ec <LED_off>
	}
	LCD_move_cursor(1,cursor+1);
 594:	6c e0       	ldi	r22, 0x0C	; 12
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_move_cursor>
	LCD_send_char(48+(counter%10));
 59c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 5a0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 5a4:	ca e0       	ldi	r28, 0x0A	; 10
 5a6:	d0 e0       	ldi	r29, 0x00	; 0
 5a8:	be 01       	movw	r22, r28
 5aa:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__divmodhi4>
 5ae:	80 5d       	subi	r24, 0xD0	; 208
 5b0:	0e 94 34 02 	call	0x468	; 0x468 <LCD_send_char>
	LCD_move_cursor(1,cursor);
 5b4:	6b e0       	ldi	r22, 0x0B	; 11
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_move_cursor>
	LCD_send_char(48+(counter/10));
 5bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 5c0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 5c4:	be 01       	movw	r22, r28
 5c6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__divmodhi4>
 5ca:	80 e3       	ldi	r24, 0x30	; 48
 5cc:	86 0f       	add	r24, r22
 5ce:	0e 94 34 02 	call	0x468	; 0x468 <LCD_send_char>

	
    }
 5d2:	b3 cf       	rjmp	.-154    	; 0x53a <main+0x46>

000005d4 <__divmodhi4>:
 5d4:	97 fb       	bst	r25, 7
 5d6:	07 2e       	mov	r0, r23
 5d8:	16 f4       	brtc	.+4      	; 0x5de <__divmodhi4+0xa>
 5da:	00 94       	com	r0
 5dc:	07 d0       	rcall	.+14     	; 0x5ec <__divmodhi4_neg1>
 5de:	77 fd       	sbrc	r23, 7
 5e0:	09 d0       	rcall	.+18     	; 0x5f4 <__divmodhi4_neg2>
 5e2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__udivmodhi4>
 5e6:	07 fc       	sbrc	r0, 7
 5e8:	05 d0       	rcall	.+10     	; 0x5f4 <__divmodhi4_neg2>
 5ea:	3e f4       	brtc	.+14     	; 0x5fa <__divmodhi4_exit>

000005ec <__divmodhi4_neg1>:
 5ec:	90 95       	com	r25
 5ee:	81 95       	neg	r24
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	08 95       	ret

000005f4 <__divmodhi4_neg2>:
 5f4:	70 95       	com	r23
 5f6:	61 95       	neg	r22
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255

000005fa <__divmodhi4_exit>:
 5fa:	08 95       	ret

000005fc <__udivmodhi4>:
 5fc:	aa 1b       	sub	r26, r26
 5fe:	bb 1b       	sub	r27, r27
 600:	51 e1       	ldi	r21, 0x11	; 17
 602:	07 c0       	rjmp	.+14     	; 0x612 <__udivmodhi4_ep>

00000604 <__udivmodhi4_loop>:
 604:	aa 1f       	adc	r26, r26
 606:	bb 1f       	adc	r27, r27
 608:	a6 17       	cp	r26, r22
 60a:	b7 07       	cpc	r27, r23
 60c:	10 f0       	brcs	.+4      	; 0x612 <__udivmodhi4_ep>
 60e:	a6 1b       	sub	r26, r22
 610:	b7 0b       	sbc	r27, r23

00000612 <__udivmodhi4_ep>:
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	5a 95       	dec	r21
 618:	a9 f7       	brne	.-22     	; 0x604 <__udivmodhi4_loop>
 61a:	80 95       	com	r24
 61c:	90 95       	com	r25
 61e:	bc 01       	movw	r22, r24
 620:	cd 01       	movw	r24, r26
 622:	08 95       	ret

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
