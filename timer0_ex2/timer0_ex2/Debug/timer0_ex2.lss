
timer0_ex2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000478  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006a  0080006a  00000516  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dbd  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ae  00000000  00000000  00001441  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082d  00000000  00000000  00001bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a18  00000000  00000000  00002a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000342a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  8a:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_set_bit_dir>:
			break;
			case 'C':
				TOG_BIT(PORTC,bit);
			break;
			case 'D':
				TOG_BIT(PORTD,bit);
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_set_bit_dir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_set_bit_dir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_set_bit_dir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_set_bit_dir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_set_bit_dir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_set_bit_dir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_set_bit_dir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_set_bit_dir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_set_bit_dir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_set_bit_dir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_set_bit_dir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_set_bit_dir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_set_bit_dir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_set_bit_dir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_set_bit_dir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_set_bit_dir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_set_bit_dir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_set_bit_dir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_set_bit_dir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_set_bit_dir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_set_bit_dir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_set_bit_dir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_set_bit_dir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_set_bit_dir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_set_bit_dir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_set_bit_dir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write_bit>:
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write_bit+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write_bit+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write_bit+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write_bit+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write_bit+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write_bit+0xae>
 188:	08 95       	ret
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write_bit+0x32>
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write_bit+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write_bit+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write_bit+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write_bit+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write_bit+0x64>
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write_bit+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write_bit+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write_bit+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write_bit+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write_bit+0x96>
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write_bit+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write_bit+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write_bit+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write_bit+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write_bit+0xc8>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write_bit+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write_bit+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write_bit+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write_bit+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_set_port_dir>:
			break;
	}
}
void DIO_set_port_dir(unsigned char port , unsigned char dir){
	switch(port){
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	81 f0       	breq	.+32     	; 0x276 <DIO_set_port_dir+0x24>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_set_port_dir+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_set_port_dir+0x16>
 25c:	08 95       	ret
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	89 f0       	breq	.+34     	; 0x284 <DIO_set_port_dir+0x32>
 262:	84 34       	cpi	r24, 0x44	; 68
 264:	b1 f0       	breq	.+44     	; 0x292 <DIO_set_port_dir+0x40>
 266:	08 95       	ret
		case 'A':
		if (dir==1){
 268:	61 30       	cpi	r22, 0x01	; 1
 26a:	19 f4       	brne	.+6      	; 0x272 <DIO_set_port_dir+0x20>
			DDRA=0xff;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	8a bb       	out	0x1a, r24	; 26
 270:	08 95       	ret
		}
		else{
			DDRA=0x00;
 272:	1a ba       	out	0x1a, r1	; 26
 274:	08 95       	ret
		}
		break;
		case 'B':
		if (dir==1){
 276:	61 30       	cpi	r22, 0x01	; 1
 278:	19 f4       	brne	.+6      	; 0x280 <DIO_set_port_dir+0x2e>
			DDRB=0xff;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	87 bb       	out	0x17, r24	; 23
 27e:	08 95       	ret
		}
		else{
			DDRB=0x00;
 280:	17 ba       	out	0x17, r1	; 23
 282:	08 95       	ret
		}
		break;
		case 'C':
		if (dir==1){
 284:	61 30       	cpi	r22, 0x01	; 1
 286:	19 f4       	brne	.+6      	; 0x28e <DIO_set_port_dir+0x3c>
			DDRC=0xff;
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	84 bb       	out	0x14, r24	; 20
 28c:	08 95       	ret
		}
		else{
			DDRC=0x00;
 28e:	14 ba       	out	0x14, r1	; 20
 290:	08 95       	ret
		}
		break;
		case 'D':
		if (dir==1){
 292:	61 30       	cpi	r22, 0x01	; 1
 294:	19 f4       	brne	.+6      	; 0x29c <DIO_set_port_dir+0x4a>
			DDRD=0xff;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	81 bb       	out	0x11, r24	; 17
 29a:	08 95       	ret
		}
		else{
			DDRD=0x00;
 29c:	11 ba       	out	0x11, r1	; 17
 29e:	08 95       	ret

000002a0 <DIO_write_port>:
		}
		break;
	}
}
void DIO_write_port(unsigned char port, unsigned char value){
	switch(port){
 2a0:	82 34       	cpi	r24, 0x42	; 66
 2a2:	59 f0       	breq	.+22     	; 0x2ba <DIO_write_port+0x1a>
 2a4:	18 f4       	brcc	.+6      	; 0x2ac <DIO_write_port+0xc>
 2a6:	81 34       	cpi	r24, 0x41	; 65
 2a8:	31 f0       	breq	.+12     	; 0x2b6 <DIO_write_port+0x16>
 2aa:	08 95       	ret
 2ac:	83 34       	cpi	r24, 0x43	; 67
 2ae:	39 f0       	breq	.+14     	; 0x2be <DIO_write_port+0x1e>
 2b0:	84 34       	cpi	r24, 0x44	; 68
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <DIO_write_port+0x22>
 2b4:	08 95       	ret
		case 'A':
			PORTA=value;
 2b6:	6b bb       	out	0x1b, r22	; 27
			break;
 2b8:	08 95       	ret
		case 'B':
			PORTB=value;
 2ba:	68 bb       	out	0x18, r22	; 24
			break;
 2bc:	08 95       	ret
		case 'C':
			PORTC=value;
 2be:	65 bb       	out	0x15, r22	; 21
			break;
 2c0:	08 95       	ret
		case 'D':
			PORTD=value;
 2c2:	62 bb       	out	0x12, r22	; 18
 2c4:	08 95       	ret

000002c6 <main>:
volatile unsigned char temp_counter=0;
volatile unsigned char delay=0;
int main(void)
{
    /* Replace with your application code */
	TIMER_init0_CTC_interrupt(80);
 2c6:	80 e5       	ldi	r24, 0x50	; 80
 2c8:	0e 94 25 02 	call	0x44a	; 0x44a <TIMER_init0_CTC_interrupt>
	SEVENSEGMENT_init('A');
 2cc:	81 e4       	ldi	r24, 0x41	; 65
 2ce:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SEVENSEGMENT_init>
	DIO_set_bit_dir('B',0,1);
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	82 e4       	ldi	r24, 0x42	; 66
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_bit_dir>
	DIO_set_bit_dir('B',1,1);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	82 e4       	ldi	r24, 0x42	; 66
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_bit_dir>

    while (1) 
    {
		DIO_write_bit('B',0,1);
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	82 e4       	ldi	r24, 0x42	; 66
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write_bit>
		DIO_write_bit('B',1,1);
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	82 e4       	ldi	r24, 0x42	; 66
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write_bit>
		
		DIO_write_bit('B',0,0);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	82 e4       	ldi	r24, 0x42	; 66
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write_bit>
		SEVENSEGMENT_write('A', counter/10);
 322:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <counter>
 326:	6d ec       	ldi	r22, 0xCD	; 205
 328:	86 9f       	mul	r24, r22
 32a:	61 2d       	mov	r22, r1
 32c:	11 24       	eor	r1, r1
 32e:	66 95       	lsr	r22
 330:	66 95       	lsr	r22
 332:	66 95       	lsr	r22
 334:	81 e4       	ldi	r24, 0x41	; 65
 336:	0e 94 00 02 	call	0x400	; 0x400 <SEVENSEGMENT_write>
		while(delay==0);
 33a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 33e:	88 23       	and	r24, r24
 340:	e1 f3       	breq	.-8      	; 0x33a <main+0x74>
		delay=0;
 342:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
		DIO_write_bit('B',0,1);
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	82 e4       	ldi	r24, 0x42	; 66
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write_bit>
		DIO_write_bit('B',1,1);
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	82 e4       	ldi	r24, 0x42	; 66
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write_bit>
		
		DIO_write_bit('B',1,0);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	82 e4       	ldi	r24, 0x42	; 66
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write_bit>
		SEVENSEGMENT_write('A', counter%10);
 376:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <counter>
 37a:	8d ec       	ldi	r24, 0xCD	; 205
 37c:	68 9f       	mul	r22, r24
 37e:	81 2d       	mov	r24, r1
 380:	11 24       	eor	r1, r1
 382:	86 95       	lsr	r24
 384:	86 95       	lsr	r24
 386:	86 95       	lsr	r24
 388:	88 0f       	add	r24, r24
 38a:	98 2f       	mov	r25, r24
 38c:	99 0f       	add	r25, r25
 38e:	99 0f       	add	r25, r25
 390:	89 0f       	add	r24, r25
 392:	68 1b       	sub	r22, r24
 394:	81 e4       	ldi	r24, 0x41	; 65
 396:	0e 94 00 02 	call	0x400	; 0x400 <SEVENSEGMENT_write>
		while(delay==0);
 39a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 39e:	88 23       	and	r24, r24
 3a0:	e1 f3       	breq	.-8      	; 0x39a <main+0xd4>
		delay=0;	
 3a2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
		if (temp_counter>=100){
 3a6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temp_counter>
 3aa:	84 36       	cpi	r24, 0x64	; 100
 3ac:	38 f0       	brcs	.+14     	; 0x3bc <main+0xf6>
			temp_counter=0;
 3ae:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp_counter>
			counter++;
 3b2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <counter>
 3b6:	8f 5f       	subi	r24, 0xFF	; 255
 3b8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <counter>
		}
		if (counter>99){
 3bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <counter>
 3c0:	84 36       	cpi	r24, 0x64	; 100
 3c2:	08 f4       	brcc	.+2      	; 0x3c6 <main+0x100>
 3c4:	96 cf       	rjmp	.-212    	; 0x2f2 <main+0x2c>
		counter=0;
 3c6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <counter>
 3ca:	93 cf       	rjmp	.-218    	; 0x2f2 <main+0x2c>

000003cc <__vector_10>:
		}
    }
}

ISR(TIMER0_COMP_vect){
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	8f 93       	push	r24
	temp_counter++;
 3d8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temp_counter>
 3dc:	8f 5f       	subi	r24, 0xFF	; 255
 3de:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <temp_counter>
	delay+=1;
 3e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 3e6:	8f 5f       	subi	r24, 0xFF	; 255
 3e8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 3ec:	8f 91       	pop	r24
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <SEVENSEGMENT_init>:
 *  Author: remon
 */ 

#include "DIO.h"
void SEVENSEGMENT_init(unsigned char port ){
	DIO_set_port_dir(port,1);
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	0e 94 29 01 	call	0x252	; 0x252 <DIO_set_port_dir>
 3fe:	08 95       	ret

00000400 <SEVENSEGMENT_write>:
}
void SEVENSEGMENT_write(unsigned char port ,unsigned char number){
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	2a 97       	sbiw	r28, 0x0a	; 10
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[]={ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
 414:	9a e0       	ldi	r25, 0x0A	; 10
 416:	e0 e6       	ldi	r30, 0x60	; 96
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	de 01       	movw	r26, r28
 41c:	11 96       	adiw	r26, 0x01	; 1
 41e:	01 90       	ld	r0, Z+
 420:	0d 92       	st	X+, r0
 422:	9a 95       	dec	r25
 424:	e1 f7       	brne	.-8      	; 0x41e <SEVENSEGMENT_write+0x1e>
	DIO_write_port(port,arr[number]);
 426:	e1 e0       	ldi	r30, 0x01	; 1
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	ec 0f       	add	r30, r28
 42c:	fd 1f       	adc	r31, r29
 42e:	e6 0f       	add	r30, r22
 430:	f1 1d       	adc	r31, r1
 432:	60 81       	ld	r22, Z
 434:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write_port>

}
 438:	2a 96       	adiw	r28, 0x0a	; 10
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <TIMER_init0_CTC_interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>

void TIMER_init0_CTC_interrupt(unsigned char value){
	//select mode
	SET_BIT(TCCR0,WGM01);
 44a:	93 b7       	in	r25, 0x33	; 51
 44c:	98 60       	ori	r25, 0x08	; 8
 44e:	93 bf       	out	0x33, r25	; 51
	CLR_BIT(TCCR0,WGM00);
 450:	93 b7       	in	r25, 0x33	; 51
 452:	9f 7b       	andi	r25, 0xBF	; 191
 454:	93 bf       	out	0x33, r25	; 51
	//enable global interrupt
	sei();
 456:	78 94       	sei
	//define clock(prescaler)
	SET_BIT(TCCR0,CS00);
 458:	93 b7       	in	r25, 0x33	; 51
 45a:	91 60       	ori	r25, 0x01	; 1
 45c:	93 bf       	out	0x33, r25	; 51
	CLR_BIT(TCCR0,CS01);
 45e:	93 b7       	in	r25, 0x33	; 51
 460:	9d 7f       	andi	r25, 0xFD	; 253
 462:	93 bf       	out	0x33, r25	; 51
	SET_BIT(TCCR0,CS02);
 464:	93 b7       	in	r25, 0x33	; 51
 466:	94 60       	ori	r25, 0x04	; 4
 468:	93 bf       	out	0x33, r25	; 51
	//compare value
	OCR0=value;
 46a:	8c bf       	out	0x3c, r24	; 60
	//enable compare interrupt
	SET_BIT(TIMSK,OCIE0);
 46c:	89 b7       	in	r24, 0x39	; 57
 46e:	82 60       	ori	r24, 0x02	; 2
 470:	89 bf       	out	0x39, r24	; 57
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
