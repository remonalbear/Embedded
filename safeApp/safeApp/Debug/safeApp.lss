
safeApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000940  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  00000940  000009b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001807  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009bc  00000000  00000000  000023db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d41  00000000  00000000  00002d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00003ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e5  00000000  00000000  00003d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001034  00000000  00000000  00004205  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00005239  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3d       	cpi	r26, 0xD2	; 210
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8e 03 	call	0x71c	; 0x71c <main>
  7a:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_set_bit_dir>:
			case 'D':
				value=PIND;
			break;
}
	return value;
}
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	19 f1       	breq	.+70     	; 0xcc <DIO_set_bit_dir+0x4a>
  86:	18 f4       	brcc	.+6      	; 0x8e <DIO_set_bit_dir+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	39 f0       	breq	.+14     	; 0x9a <DIO_set_bit_dir+0x18>
  8c:	08 95       	ret
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	b1 f1       	breq	.+108    	; 0xfe <DIO_set_bit_dir+0x7c>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_set_bit_dir+0x16>
  96:	4c c0       	rjmp	.+152    	; 0x130 <DIO_set_bit_dir+0xae>
  98:	08 95       	ret
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	59 f4       	brne	.+22     	; 0xb4 <DIO_set_bit_dir+0x32>
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_set_bit_dir+0x28>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_set_bit_dir+0x24>
  ae:	82 2b       	or	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_set_bit_dir+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_set_bit_dir+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	59 f4       	brne	.+22     	; 0xe6 <DIO_set_bit_dir+0x64>
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_set_bit_dir+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_set_bit_dir+0x56>
  e0:	82 2b       	or	r24, r18
  e2:	87 bb       	out	0x17, r24	; 23
  e4:	08 95       	ret
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_set_bit_dir+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_set_bit_dir+0x6c>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	59 f4       	brne	.+22     	; 0x118 <DIO_set_bit_dir+0x96>
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_set_bit_dir+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_set_bit_dir+0x88>
 112:	82 2b       	or	r24, r18
 114:	84 bb       	out	0x14, r24	; 20
 116:	08 95       	ret
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_set_bit_dir+0xa2>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_set_bit_dir+0x9e>
 128:	80 95       	com	r24
 12a:	82 23       	and	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <DIO_set_bit_dir+0xc8>
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_set_bit_dir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_set_bit_dir+0xba>
 144:	82 2b       	or	r24, r18
 146:	81 bb       	out	0x11, r24	; 17
 148:	08 95       	ret
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_set_bit_dir+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_set_bit_dir+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_read_bit>:
 162:	82 34       	cpi	r24, 0x42	; 66
 164:	f9 f0       	breq	.+62     	; 0x1a4 <DIO_read_bit+0x42>
 166:	18 f4       	brcc	.+6      	; 0x16e <DIO_read_bit+0xc>
 168:	81 34       	cpi	r24, 0x41	; 65
 16a:	39 f0       	breq	.+14     	; 0x17a <DIO_read_bit+0x18>
 16c:	59 c0       	rjmp	.+178    	; 0x220 <DIO_read_bit+0xbe>
 16e:	83 34       	cpi	r24, 0x43	; 67
 170:	71 f1       	breq	.+92     	; 0x1ce <DIO_read_bit+0x6c>
 172:	84 34       	cpi	r24, 0x44	; 68
 174:	09 f4       	brne	.+2      	; 0x178 <DIO_read_bit+0x16>
 176:	40 c0       	rjmp	.+128    	; 0x1f8 <DIO_read_bit+0x96>
 178:	53 c0       	rjmp	.+166    	; 0x220 <DIO_read_bit+0xbe>
 17a:	49 b3       	in	r20, 0x19	; 25
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	9c 01       	movw	r18, r24
 182:	06 2e       	mov	r0, r22
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_read_bit+0x28>
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_read_bit+0x24>
 18e:	84 2f       	mov	r24, r20
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	82 23       	and	r24, r18
 194:	93 23       	and	r25, r19
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_read_bit+0x3a>
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_read_bit+0x36>
 1a0:	98 2f       	mov	r25, r24
 1a2:	3e c0       	rjmp	.+124    	; 0x220 <DIO_read_bit+0xbe>
 1a4:	46 b3       	in	r20, 0x16	; 22
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9c 01       	movw	r18, r24
 1ac:	06 2e       	mov	r0, r22
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_read_bit+0x52>
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_read_bit+0x4e>
 1b8:	84 2f       	mov	r24, r20
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	82 23       	and	r24, r18
 1be:	93 23       	and	r25, r19
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_read_bit+0x64>
 1c2:	96 95       	lsr	r25
 1c4:	87 95       	ror	r24
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_read_bit+0x60>
 1ca:	98 2f       	mov	r25, r24
 1cc:	29 c0       	rjmp	.+82     	; 0x220 <DIO_read_bit+0xbe>
 1ce:	43 b3       	in	r20, 0x13	; 19
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	9c 01       	movw	r18, r24
 1d6:	06 2e       	mov	r0, r22
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_read_bit+0x7c>
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_read_bit+0x78>
 1e2:	84 2f       	mov	r24, r20
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	82 23       	and	r24, r18
 1e8:	93 23       	and	r25, r19
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_read_bit+0x8e>
 1ec:	96 95       	lsr	r25
 1ee:	87 95       	ror	r24
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_read_bit+0x8a>
 1f4:	98 2f       	mov	r25, r24
 1f6:	14 c0       	rjmp	.+40     	; 0x220 <DIO_read_bit+0xbe>
 1f8:	40 b3       	in	r20, 0x10	; 16
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	9c 01       	movw	r18, r24
 200:	06 2e       	mov	r0, r22
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_read_bit+0xa6>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_read_bit+0xa2>
 20c:	84 2f       	mov	r24, r20
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	82 23       	and	r24, r18
 212:	93 23       	and	r25, r19
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_read_bit+0xb8>
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_read_bit+0xb4>
 21e:	98 2f       	mov	r25, r24
 220:	89 2f       	mov	r24, r25
 222:	08 95       	ret

00000224 <DIO_write_bit>:
 224:	82 34       	cpi	r24, 0x42	; 66
 226:	19 f1       	breq	.+70     	; 0x26e <DIO_write_bit+0x4a>
 228:	18 f4       	brcc	.+6      	; 0x230 <DIO_write_bit+0xc>
 22a:	81 34       	cpi	r24, 0x41	; 65
 22c:	39 f0       	breq	.+14     	; 0x23c <DIO_write_bit+0x18>
 22e:	08 95       	ret
 230:	83 34       	cpi	r24, 0x43	; 67
 232:	b1 f1       	breq	.+108    	; 0x2a0 <DIO_write_bit+0x7c>
 234:	84 34       	cpi	r24, 0x44	; 68
 236:	09 f4       	brne	.+2      	; 0x23a <DIO_write_bit+0x16>
 238:	4c c0       	rjmp	.+152    	; 0x2d2 <DIO_write_bit+0xae>
 23a:	08 95       	ret
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_write_bit+0x32>
 240:	2b b3       	in	r18, 0x1b	; 27
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_write_bit+0x28>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_write_bit+0x24>
 250:	82 2b       	or	r24, r18
 252:	8b bb       	out	0x1b, r24	; 27
 254:	08 95       	ret
 256:	2b b3       	in	r18, 0x1b	; 27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_write_bit+0x3e>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_write_bit+0x3a>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	8b bb       	out	0x1b, r24	; 27
 26c:	08 95       	ret
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	59 f4       	brne	.+22     	; 0x288 <DIO_write_bit+0x64>
 272:	28 b3       	in	r18, 0x18	; 24
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_write_bit+0x5a>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_write_bit+0x56>
 282:	82 2b       	or	r24, r18
 284:	88 bb       	out	0x18, r24	; 24
 286:	08 95       	ret
 288:	28 b3       	in	r18, 0x18	; 24
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_write_bit+0x70>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_write_bit+0x6c>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	88 bb       	out	0x18, r24	; 24
 29e:	08 95       	ret
 2a0:	41 30       	cpi	r20, 0x01	; 1
 2a2:	59 f4       	brne	.+22     	; 0x2ba <DIO_write_bit+0x96>
 2a4:	25 b3       	in	r18, 0x15	; 21
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_write_bit+0x8c>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_write_bit+0x88>
 2b4:	82 2b       	or	r24, r18
 2b6:	85 bb       	out	0x15, r24	; 21
 2b8:	08 95       	ret
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_write_bit+0xa2>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_write_bit+0x9e>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	85 bb       	out	0x15, r24	; 21
 2d0:	08 95       	ret
 2d2:	41 30       	cpi	r20, 0x01	; 1
 2d4:	59 f4       	brne	.+22     	; 0x2ec <DIO_write_bit+0xc8>
 2d6:	22 b3       	in	r18, 0x12	; 18
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_write_bit+0xbe>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_write_bit+0xba>
 2e6:	82 2b       	or	r24, r18
 2e8:	82 bb       	out	0x12, r24	; 18
 2ea:	08 95       	ret
 2ec:	22 b3       	in	r18, 0x12	; 18
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_write_bit+0xd4>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_write_bit+0xd0>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	82 bb       	out	0x12, r24	; 18
 302:	08 95       	ret

00000304 <DIO_set_port_dir>:
 304:	82 34       	cpi	r24, 0x42	; 66
 306:	81 f0       	breq	.+32     	; 0x328 <DIO_set_port_dir+0x24>
 308:	18 f4       	brcc	.+6      	; 0x310 <DIO_set_port_dir+0xc>
 30a:	81 34       	cpi	r24, 0x41	; 65
 30c:	31 f0       	breq	.+12     	; 0x31a <DIO_set_port_dir+0x16>
 30e:	08 95       	ret
 310:	83 34       	cpi	r24, 0x43	; 67
 312:	89 f0       	breq	.+34     	; 0x336 <DIO_set_port_dir+0x32>
 314:	84 34       	cpi	r24, 0x44	; 68
 316:	b1 f0       	breq	.+44     	; 0x344 <DIO_set_port_dir+0x40>
 318:	08 95       	ret
 31a:	61 30       	cpi	r22, 0x01	; 1
 31c:	19 f4       	brne	.+6      	; 0x324 <DIO_set_port_dir+0x20>
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	8a bb       	out	0x1a, r24	; 26
 322:	08 95       	ret
 324:	1a ba       	out	0x1a, r1	; 26
 326:	08 95       	ret
 328:	61 30       	cpi	r22, 0x01	; 1
 32a:	19 f4       	brne	.+6      	; 0x332 <DIO_set_port_dir+0x2e>
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	87 bb       	out	0x17, r24	; 23
 330:	08 95       	ret
 332:	17 ba       	out	0x17, r1	; 23
 334:	08 95       	ret
 336:	61 30       	cpi	r22, 0x01	; 1
 338:	19 f4       	brne	.+6      	; 0x340 <DIO_set_port_dir+0x3c>
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	84 bb       	out	0x14, r24	; 20
 33e:	08 95       	ret
 340:	14 ba       	out	0x14, r1	; 20
 342:	08 95       	ret
 344:	61 30       	cpi	r22, 0x01	; 1
 346:	19 f4       	brne	.+6      	; 0x34e <DIO_set_port_dir+0x4a>
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	81 bb       	out	0x11, r24	; 17
 34c:	08 95       	ret
 34e:	11 ba       	out	0x11, r1	; 17
 350:	08 95       	ret

00000352 <DIO_write_port>:
 352:	82 34       	cpi	r24, 0x42	; 66
 354:	59 f0       	breq	.+22     	; 0x36c <DIO_write_port+0x1a>
 356:	18 f4       	brcc	.+6      	; 0x35e <DIO_write_port+0xc>
 358:	81 34       	cpi	r24, 0x41	; 65
 35a:	31 f0       	breq	.+12     	; 0x368 <DIO_write_port+0x16>
 35c:	08 95       	ret
 35e:	83 34       	cpi	r24, 0x43	; 67
 360:	39 f0       	breq	.+14     	; 0x370 <DIO_write_port+0x1e>
 362:	84 34       	cpi	r24, 0x44	; 68
 364:	39 f0       	breq	.+14     	; 0x374 <DIO_write_port+0x22>
 366:	08 95       	ret
 368:	6b bb       	out	0x1b, r22	; 27
 36a:	08 95       	ret
 36c:	68 bb       	out	0x18, r22	; 24
 36e:	08 95       	ret
 370:	65 bb       	out	0x15, r22	; 21
 372:	08 95       	ret
 374:	62 bb       	out	0x12, r22	; 18
 376:	08 95       	ret

00000378 <DIO_connect_pullup>:

void DIO_connect_pullup(unsigned char port,unsigned char bit,unsigned char connect){
	switch(port){
 378:	82 34       	cpi	r24, 0x42	; 66
 37a:	19 f1       	breq	.+70     	; 0x3c2 <DIO_connect_pullup+0x4a>
 37c:	18 f4       	brcc	.+6      	; 0x384 <DIO_connect_pullup+0xc>
 37e:	81 34       	cpi	r24, 0x41	; 65
 380:	39 f0       	breq	.+14     	; 0x390 <DIO_connect_pullup+0x18>
 382:	08 95       	ret
 384:	83 34       	cpi	r24, 0x43	; 67
 386:	b1 f1       	breq	.+108    	; 0x3f4 <DIO_connect_pullup+0x7c>
 388:	84 34       	cpi	r24, 0x44	; 68
 38a:	09 f4       	brne	.+2      	; 0x38e <DIO_connect_pullup+0x16>
 38c:	4c c0       	rjmp	.+152    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 38e:	08 95       	ret
		case 'A':
		if (connect==1){
 390:	41 30       	cpi	r20, 0x01	; 1
 392:	59 f4       	brne	.+22     	; 0x3aa <DIO_connect_pullup+0x32>
			SET_BIT(PORTA,bit);
 394:	2b b3       	in	r18, 0x1b	; 27
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_connect_pullup+0x28>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_connect_pullup+0x24>
 3a4:	82 2b       	or	r24, r18
 3a6:	8b bb       	out	0x1b, r24	; 27
 3a8:	08 95       	ret
		}
		else{
			CLR_BIT(PORTA,bit);
 3aa:	2b b3       	in	r18, 0x1b	; 27
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_connect_pullup+0x3e>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_connect_pullup+0x3a>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	8b bb       	out	0x1b, r24	; 27
 3c0:	08 95       	ret
		}
		break;
		case 'B':
		if (connect==1){
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	59 f4       	brne	.+22     	; 0x3dc <DIO_connect_pullup+0x64>
			SET_BIT(PORTB,bit);
 3c6:	28 b3       	in	r18, 0x18	; 24
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_connect_pullup+0x5a>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_connect_pullup+0x56>
 3d6:	82 2b       	or	r24, r18
 3d8:	88 bb       	out	0x18, r24	; 24
 3da:	08 95       	ret
		}
		else{
			CLR_BIT(PORTB,bit);
 3dc:	28 b3       	in	r18, 0x18	; 24
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_connect_pullup+0x70>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_connect_pullup+0x6c>
 3ec:	80 95       	com	r24
 3ee:	82 23       	and	r24, r18
 3f0:	88 bb       	out	0x18, r24	; 24
 3f2:	08 95       	ret
		}
		break;
		case 'C':
		if (connect==1){
 3f4:	41 30       	cpi	r20, 0x01	; 1
 3f6:	59 f4       	brne	.+22     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			SET_BIT(PORTC,bit);
 3f8:	25 b3       	in	r18, 0x15	; 21
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	82 2b       	or	r24, r18
 40a:	85 bb       	out	0x15, r24	; 21
 40c:	08 95       	ret
		}
		else{
			CLR_BIT(PORTC,bit);
 40e:	25 b3       	in	r18, 0x15	; 21
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	80 95       	com	r24
 420:	82 23       	and	r24, r18
 422:	85 bb       	out	0x15, r24	; 21
 424:	08 95       	ret
		}
		break;
		case 'D':
		if (connect==1){
 426:	41 30       	cpi	r20, 0x01	; 1
 428:	59 f4       	brne	.+22     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			SET_BIT(PORTD,bit);
 42a:	22 b3       	in	r18, 0x12	; 18
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	82 2b       	or	r24, r18
 43c:	82 bb       	out	0x12, r24	; 18
 43e:	08 95       	ret
		}
		else{
			CLR_BIT(PORTD,bit);
 440:	22 b3       	in	r18, 0x12	; 18
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	82 23       	and	r24, r18
 454:	82 bb       	out	0x12, r24	; 18
 456:	08 95       	ret

00000458 <EEPROM_write>:
#include "macros.h"


void EEPROM_write(unsigned short adress,unsigned char data){
	// writing the adress to low and high registers
	EEARL=(char)adress;
 458:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)adress>>8;
 45a:	1f ba       	out	0x1f, r1	; 31
	// write the data to the data register
	EEDR=data;
 45c:	6d bb       	out	0x1d, r22	; 29
	//set master write enable bit and write enable bit  
	SET_BIT(EECR,EEMWE);
 45e:	8c b3       	in	r24, 0x1c	; 28
 460:	84 60       	ori	r24, 0x04	; 4
 462:	8c bb       	out	0x1c, r24	; 28
	SET_BIT(EECR,EEWE);
 464:	8c b3       	in	r24, 0x1c	; 28
 466:	82 60       	ori	r24, 0x02	; 2
 468:	8c bb       	out	0x1c, r24	; 28
	// loop until write enable bit to be cleared
	while(READ_BIT(EECR,EEWE)==1);
 46a:	e1 99       	sbic	0x1c, 1	; 28
 46c:	fe cf       	rjmp	.-4      	; 0x46a <EEPROM_write+0x12>
}
 46e:	08 95       	ret

00000470 <EEPROM_read>:
unsigned char EEPROM_read(unsigned short adress){
	// writing the adress to low and high registers
	EEARL=(char)adress;
 470:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)adress>>8;	
 472:	1f ba       	out	0x1f, r1	; 31
	// set read enable bit  
	SET_BIT(EECR,EERE);
 474:	8c b3       	in	r24, 0x1c	; 28
 476:	81 60       	ori	r24, 0x01	; 1
 478:	8c bb       	out	0x1c, r24	; 28
	
	return EEDR;
 47a:	8d b3       	in	r24, 0x1d	; 29
}
 47c:	08 95       	ret

0000047e <KEYPAD_init>:
 */ 
#include "KEYPAD.h"
#include "DIO.h"

void KEYPAD_init(){
DIO_set_bit_dir(PORT,0,1);
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	84 e4       	ldi	r24, 0x44	; 68
 484:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
DIO_set_bit_dir(PORT,1,1);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	84 e4       	ldi	r24, 0x44	; 68
 48e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
DIO_set_bit_dir(PORT,2,1);
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	62 e0       	ldi	r22, 0x02	; 2
 496:	84 e4       	ldi	r24, 0x44	; 68
 498:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
DIO_set_bit_dir(PORT,3,1);
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	63 e0       	ldi	r22, 0x03	; 3
 4a0:	84 e4       	ldi	r24, 0x44	; 68
 4a2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
DIO_set_bit_dir(PORT,4,0);
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	64 e0       	ldi	r22, 0x04	; 4
 4aa:	84 e4       	ldi	r24, 0x44	; 68
 4ac:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
DIO_set_bit_dir(PORT,5,0);
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	65 e0       	ldi	r22, 0x05	; 5
 4b4:	84 e4       	ldi	r24, 0x44	; 68
 4b6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
DIO_set_bit_dir(PORT,6,0);
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	66 e0       	ldi	r22, 0x06	; 6
 4be:	84 e4       	ldi	r24, 0x44	; 68
 4c0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
DIO_set_bit_dir(PORT,7,0);	
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	67 e0       	ldi	r22, 0x07	; 7
 4c8:	84 e4       	ldi	r24, 0x44	; 68
 4ca:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
DIO_connect_pullup(PORT,4,1);
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	64 e0       	ldi	r22, 0x04	; 4
 4d2:	84 e4       	ldi	r24, 0x44	; 68
 4d4:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_connect_pullup>
DIO_connect_pullup(PORT,5,1);
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	65 e0       	ldi	r22, 0x05	; 5
 4dc:	84 e4       	ldi	r24, 0x44	; 68
 4de:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_connect_pullup>
DIO_connect_pullup(PORT,6,1);
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	66 e0       	ldi	r22, 0x06	; 6
 4e6:	84 e4       	ldi	r24, 0x44	; 68
 4e8:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_connect_pullup>
DIO_connect_pullup(PORT,7,1);
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	67 e0       	ldi	r22, 0x07	; 7
 4f0:	84 e4       	ldi	r24, 0x44	; 68
 4f2:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_connect_pullup>
 4f6:	08 95       	ret

000004f8 <KEYPAD_read>:
	
}
char KEYPAD_read(){
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
 508:	60 97       	sbiw	r28, 0x10	; 16
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	de bf       	out	0x3e, r29	; 62
 510:	0f be       	out	0x3f, r0	; 63
 512:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	e0 e6       	ldi	r30, 0x60	; 96
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	de 01       	movw	r26, r28
 51c:	11 96       	adiw	r26, 0x01	; 1
 51e:	01 90       	ld	r0, Z+
 520:	0d 92       	st	X+, r0
 522:	8a 95       	dec	r24
 524:	e1 f7       	brne	.-8      	; 0x51e <KEYPAD_read+0x26>
	char col,row,x;
	char returnValue= NOTPRESSED;
 526:	ee 24       	eor	r14, r14
 528:	ea 94       	dec	r14
	for(row=0;row<4;row++){
 52a:	f1 2c       	mov	r15, r1
 52c:	39 c0       	rjmp	.+114    	; 0x5a0 <KEYPAD_read+0xa8>
		DIO_write_bit(PORT,0,1);
 52e:	41 e0       	ldi	r20, 0x01	; 1
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	84 e4       	ldi	r24, 0x44	; 68
 534:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
		DIO_write_bit(PORT,1,1);
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	84 e4       	ldi	r24, 0x44	; 68
 53e:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
		DIO_write_bit(PORT,2,1);
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	84 e4       	ldi	r24, 0x44	; 68
 548:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
		DIO_write_bit(PORT,3,1);
 54c:	41 e0       	ldi	r20, 0x01	; 1
 54e:	63 e0       	ldi	r22, 0x03	; 3
 550:	84 e4       	ldi	r24, 0x44	; 68
 552:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
		DIO_write_bit(PORT,row,0);
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	6f 2d       	mov	r22, r15
 55a:	84 e4       	ldi	r24, 0x44	; 68
 55c:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
		for(col=0;col<4;col++){
 560:	10 e0       	ldi	r17, 0x00	; 0
 562:	19 c0       	rjmp	.+50     	; 0x596 <KEYPAD_read+0x9e>
			x=DIO_read_bit(PORT,col+4);
 564:	64 e0       	ldi	r22, 0x04	; 4
 566:	61 0f       	add	r22, r17
 568:	84 e4       	ldi	r24, 0x44	; 68
 56a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_read_bit>
 56e:	08 2f       	mov	r16, r24
			if(x==0){
 570:	81 11       	cpse	r24, r1
 572:	10 c0       	rjmp	.+32     	; 0x594 <KEYPAD_read+0x9c>
				returnValue=arr[row][col];
 574:	ef 2d       	mov	r30, r15
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	8c 0f       	add	r24, r28
 586:	9d 1f       	adc	r25, r29
 588:	e8 0f       	add	r30, r24
 58a:	f9 1f       	adc	r31, r25
 58c:	e1 0f       	add	r30, r17
 58e:	f1 1d       	adc	r31, r1
 590:	e0 80       	ld	r14, Z
				break;
 592:	03 c0       	rjmp	.+6      	; 0x59a <KEYPAD_read+0xa2>
		DIO_write_bit(PORT,0,1);
		DIO_write_bit(PORT,1,1);
		DIO_write_bit(PORT,2,1);
		DIO_write_bit(PORT,3,1);
		DIO_write_bit(PORT,row,0);
		for(col=0;col<4;col++){
 594:	1f 5f       	subi	r17, 0xFF	; 255
 596:	14 30       	cpi	r17, 0x04	; 4
 598:	28 f3       	brcs	.-54     	; 0x564 <KEYPAD_read+0x6c>
			if(x==0){
				returnValue=arr[row][col];
				break;
			}
		}
		if(x==0){
 59a:	00 23       	and	r16, r16
 59c:	21 f0       	breq	.+8      	; 0x5a6 <KEYPAD_read+0xae>
}
char KEYPAD_read(){
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	char col,row,x;
	char returnValue= NOTPRESSED;
	for(row=0;row<4;row++){
 59e:	f3 94       	inc	r15
 5a0:	93 e0       	ldi	r25, 0x03	; 3
 5a2:	9f 15       	cp	r25, r15
 5a4:	20 f6       	brcc	.-120    	; 0x52e <KEYPAD_read+0x36>
		if(x==0){
			break;
		}		
	}
	return returnValue;
 5a6:	8e 2d       	mov	r24, r14
 5a8:	60 96       	adiw	r28, 0x10	; 16
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	08 95       	ret

000005c2 <LCD_send_falling_edge>:
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	#endif
}
static void LCD_send_falling_edge(){
	DIO_write_bit(CONTROL_PORT,EN,1);
 5c2:	41 e0       	ldi	r20, 0x01	; 1
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	82 e4       	ldi	r24, 0x42	; 66
 5c8:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5cc:	8f e9       	ldi	r24, 0x9F	; 159
 5ce:	9f e0       	ldi	r25, 0x0F	; 15
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <LCD_send_falling_edge+0xe>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <LCD_send_falling_edge+0x14>
 5d6:	00 00       	nop
	_delay_ms(2);
	DIO_write_bit(CONTROL_PORT,EN,0);
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	82 e4       	ldi	r24, 0x42	; 66
 5de:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
 5e2:	8f e9       	ldi	r24, 0x9F	; 159
 5e4:	9f e0       	ldi	r25, 0x0F	; 15
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_send_falling_edge+0x24>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_send_falling_edge+0x2a>
 5ec:	00 00       	nop
 5ee:	08 95       	ret

000005f0 <LCD_send_cmd>:
	_delay_ms(2);
}
void LCD_send_cmd(char cmd){
	#if defined EIGH_BITS_MODE
	DIO_write_port(MAIN_PORT,cmd);
 5f0:	68 2f       	mov	r22, r24
 5f2:	81 e4       	ldi	r24, 0x41	; 65
 5f4:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_write_port>
	DIO_write_bit(CONTROL_PORT,RS,0);
 5f8:	40 e0       	ldi	r20, 0x00	; 0
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	82 e4       	ldi	r24, 0x42	; 66
 5fe:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
	LCD_send_falling_edge();
 602:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_falling_edge>
 606:	08 95       	ret

00000608 <LCD_init>:
 608:	2f ef       	ldi	r18, 0xFF	; 255
 60a:	81 ee       	ldi	r24, 0xE1	; 225
 60c:	94 e0       	ldi	r25, 0x04	; 4
 60e:	21 50       	subi	r18, 0x01	; 1
 610:	80 40       	sbci	r24, 0x00	; 0
 612:	90 40       	sbci	r25, 0x00	; 0
 614:	e1 f7       	brne	.-8      	; 0x60e <LCD_init+0x6>
 616:	00 c0       	rjmp	.+0      	; 0x618 <LCD_init+0x10>
 618:	00 00       	nop
#include <util/delay.h>

void LCD_init(){
	_delay_ms(200);
	#if defined EIGH_BITS_MODE
	DIO_set_port_dir(MAIN_PORT,1);
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	81 e4       	ldi	r24, 0x41	; 65
 61e:	0e 94 82 01 	call	0x304	; 0x304 <DIO_set_port_dir>
	DIO_set_bit_dir(CONTROL_PORT,EN,1);
 622:	41 e0       	ldi	r20, 0x01	; 1
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	82 e4       	ldi	r24, 0x42	; 66
 628:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
	DIO_set_bit_dir(CONTROL_PORT,RW,1);
 62c:	41 e0       	ldi	r20, 0x01	; 1
 62e:	62 e0       	ldi	r22, 0x02	; 2
 630:	82 e4       	ldi	r24, 0x42	; 66
 632:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
	DIO_set_bit_dir(CONTROL_PORT,RS,1);
 636:	41 e0       	ldi	r20, 0x01	; 1
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	82 e4       	ldi	r24, 0x42	; 66
 63c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_set_bit_dir>
	DIO_write_bit(CONTROL_PORT,RW,0);
 640:	40 e0       	ldi	r20, 0x00	; 0
 642:	62 e0       	ldi	r22, 0x02	; 2
 644:	82 e4       	ldi	r24, 0x42	; 66
 646:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
	LCD_send_cmd(EIGHT_BITS);
 64a:	88 e3       	ldi	r24, 0x38	; 56
 64c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_cmd>
 650:	8f ec       	ldi	r24, 0xCF	; 207
 652:	97 e0       	ldi	r25, 0x07	; 7
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <LCD_init+0x4c>
 658:	00 c0       	rjmp	.+0      	; 0x65a <LCD_init+0x52>
 65a:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CURSOR_ON_DISPLAN_ON);
 65c:	8e e0       	ldi	r24, 0x0E	; 14
 65e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_cmd>
 662:	8f ec       	ldi	r24, 0xCF	; 207
 664:	97 e0       	ldi	r25, 0x07	; 7
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <LCD_init+0x5e>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <LCD_init+0x64>
 66c:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_cmd>
 674:	8f e1       	ldi	r24, 0x1F	; 31
 676:	9e e4       	ldi	r25, 0x4E	; 78
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <LCD_init+0x70>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <LCD_init+0x76>
 67e:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 680:	86 e0       	ldi	r24, 0x06	; 6
 682:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_cmd>
 686:	8f ec       	ldi	r24, 0xCF	; 207
 688:	97 e0       	ldi	r25, 0x07	; 7
 68a:	01 97       	sbiw	r24, 0x01	; 1
 68c:	f1 f7       	brne	.-4      	; 0x68a <LCD_init+0x82>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <LCD_init+0x88>
 690:	00 00       	nop
 692:	08 95       	ret

00000694 <LCD_send_char>:
	LCD_send_falling_edge();
	#endif
}
void LCD_send_char(char data){
	#if defined EIGH_BITS_MODE
	DIO_write_port(MAIN_PORT,data);
 694:	68 2f       	mov	r22, r24
 696:	81 e4       	ldi	r24, 0x41	; 65
 698:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_write_port>
	DIO_write_bit(CONTROL_PORT,RS,1);
 69c:	41 e0       	ldi	r20, 0x01	; 1
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	82 e4       	ldi	r24, 0x42	; 66
 6a2:	0e 94 12 01 	call	0x224	; 0x224 <DIO_write_bit>
	LCD_send_falling_edge();
 6a6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_falling_edge>
 6aa:	08 95       	ret

000006ac <LCD_send_string>:
	LCD_send_falling_edge();
	#endif
	
}

void LCD_send_string(char* data){
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	ec 01       	movw	r28, r24
	while((*data) != '\0'){
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <LCD_send_string+0xe>
		LCD_send_char(*data);
 6b4:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_send_char>
		data++;
 6b8:	21 96       	adiw	r28, 0x01	; 1
	#endif
	
}

void LCD_send_string(char* data){
	while((*data) != '\0'){
 6ba:	88 81       	ld	r24, Y
 6bc:	81 11       	cpse	r24, r1
 6be:	fa cf       	rjmp	.-12     	; 0x6b4 <LCD_send_string+0x8>
		LCD_send_char(*data);
		data++;
	}
}
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <LCD_clear>:
void LCD_clear(){
	LCD_send_cmd(CLR_SCREEN);
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_cmd>
 6cc:	8f e1       	ldi	r24, 0x1F	; 31
 6ce:	9e e4       	ldi	r25, 0x4E	; 78
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <LCD_clear+0xa>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <LCD_clear+0x10>
 6d6:	00 00       	nop
 6d8:	08 95       	ret

000006da <LCD_move_cursor>:
	_delay_ms(10);
}
void LCD_move_cursor(char row,char col){
		char data ;
		if(row>2||row<1||col>16||col<1)
 6da:	9f ef       	ldi	r25, 0xFF	; 255
 6dc:	98 0f       	add	r25, r24
 6de:	92 30       	cpi	r25, 0x02	; 2
 6e0:	70 f4       	brcc	.+28     	; 0x6fe <LCD_move_cursor+0x24>
 6e2:	61 31       	cpi	r22, 0x11	; 17
 6e4:	70 f4       	brcc	.+28     	; 0x702 <LCD_move_cursor+0x28>
 6e6:	66 23       	and	r22, r22
 6e8:	71 f0       	breq	.+28     	; 0x706 <LCD_move_cursor+0x2c>
		{
			data=0x80;
		}
		else if(row==1)
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	19 f4       	brne	.+6      	; 0x6f4 <LCD_move_cursor+0x1a>
		{
			data=0x80+col-1 ;
 6ee:	2f e7       	ldi	r18, 0x7F	; 127
 6f0:	26 0f       	add	r18, r22
 6f2:	0a c0       	rjmp	.+20     	; 0x708 <LCD_move_cursor+0x2e>
		}
		else if (row==2)
 6f4:	82 30       	cpi	r24, 0x02	; 2
 6f6:	41 f4       	brne	.+16     	; 0x708 <LCD_move_cursor+0x2e>
		{
			data=0xc0+col-1;
 6f8:	2f eb       	ldi	r18, 0xBF	; 191
 6fa:	26 0f       	add	r18, r22
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <LCD_move_cursor+0x2e>
}
void LCD_move_cursor(char row,char col){
		char data ;
		if(row>2||row<1||col>16||col<1)
		{
			data=0x80;
 6fe:	20 e8       	ldi	r18, 0x80	; 128
 700:	03 c0       	rjmp	.+6      	; 0x708 <LCD_move_cursor+0x2e>
 702:	20 e8       	ldi	r18, 0x80	; 128
 704:	01 c0       	rjmp	.+2      	; 0x708 <LCD_move_cursor+0x2e>
 706:	20 e8       	ldi	r18, 0x80	; 128
		}
		else if (row==2)
		{
			data=0xc0+col-1;
		}
		LCD_send_cmd(data);
 708:	82 2f       	mov	r24, r18
 70a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_cmd>
 70e:	8f ec       	ldi	r24, 0xCF	; 207
 710:	97 e0       	ldi	r25, 0x07	; 7
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <LCD_move_cursor+0x38>
 716:	00 c0       	rjmp	.+0      	; 0x718 <LCD_move_cursor+0x3e>
 718:	00 00       	nop
 71a:	08 95       	ret

0000071c <main>:
#include "LCD.h"
#include "KEYPAD.h"
#include "EEPROM.h"

int main(void)
{
 71c:	ef 92       	push	r14
 71e:	ff 92       	push	r15
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	00 d0       	rcall	.+0      	; 0x72a <main+0xe>
 72a:	00 d0       	rcall	.+0      	; 0x72c <main+0x10>
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
	char value;
	char flag=0;
	char tries=MAX_TRIES;
	LCD_init();
 730:	0e 94 04 03 	call	0x608	; 0x608 <LCD_init>
	KEYPAD_init();
 734:	0e 94 3f 02 	call	0x47e	; 0x47e <KEYPAD_init>
	LCD_send_string("welcome");
 738:	80 e7       	ldi	r24, 0x70	; 112
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_send_string>
 740:	2f ef       	ldi	r18, 0xFF	; 255
 742:	89 e6       	ldi	r24, 0x69	; 105
 744:	98 e1       	ldi	r25, 0x18	; 24
 746:	21 50       	subi	r18, 0x01	; 1
 748:	80 40       	sbci	r24, 0x00	; 0
 74a:	90 40       	sbci	r25, 0x00	; 0
 74c:	e1 f7       	brne	.-8      	; 0x746 <main+0x2a>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <main+0x34>
 750:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
 752:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_clear>
	
    if(EEPROM_read(STATUS_ADDRES)==NOTPRESSED){
 756:	80 e2       	ldi	r24, 0x20	; 32
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 38 02 	call	0x470	; 0x470 <EEPROM_read>
 75e:	8f 3f       	cpi	r24, 0xFF	; 255
 760:	c9 f5       	brne	.+114    	; 0x7d4 <main+0xb8>
	LCD_send_string("Enter Pass:");
 762:	88 e7       	ldi	r24, 0x78	; 120
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_send_string>
	for (int i=0;i<4;i++)
 76a:	e1 2c       	mov	r14, r1
 76c:	f1 2c       	mov	r15, r1
 76e:	29 c0       	rjmp	.+82     	; 0x7c2 <main+0xa6>
	{
	do{
		value=KEYPAD_read();
 770:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <KEYPAD_read>
 774:	18 2f       	mov	r17, r24
	}while(value==NOTPRESSED);
 776:	8f 3f       	cpi	r24, 0xFF	; 255
 778:	d9 f3       	breq	.-10     	; 0x770 <main+0x54>
	LCD_send_char(value);
 77a:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_send_char>
 77e:	2f ef       	ldi	r18, 0xFF	; 255
 780:	84 e3       	ldi	r24, 0x34	; 52
 782:	9c e0       	ldi	r25, 0x0C	; 12
 784:	21 50       	subi	r18, 0x01	; 1
 786:	80 40       	sbci	r24, 0x00	; 0
 788:	90 40       	sbci	r25, 0x00	; 0
 78a:	e1 f7       	brne	.-8      	; 0x784 <main+0x68>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <main+0x72>
 78e:	00 00       	nop
	_delay_ms(500);
	LCD_move_cursor(1,12+i);
 790:	6c e0       	ldi	r22, 0x0C	; 12
 792:	6e 0d       	add	r22, r14
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_move_cursor>
	LCD_send_char('*');
 79a:	8a e2       	ldi	r24, 0x2A	; 42
 79c:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_send_char>
 7a0:	2f ef       	ldi	r18, 0xFF	; 255
 7a2:	84 e3       	ldi	r24, 0x34	; 52
 7a4:	9c e0       	ldi	r25, 0x0C	; 12
 7a6:	21 50       	subi	r18, 0x01	; 1
 7a8:	80 40       	sbci	r24, 0x00	; 0
 7aa:	90 40       	sbci	r25, 0x00	; 0
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <main+0x8a>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <main+0x94>
 7b0:	00 00       	nop
	_delay_ms(500);	
	EEPROM_write(EEPROM_ADDRES1+i,value);
 7b2:	61 2f       	mov	r22, r17
 7b4:	c7 01       	movw	r24, r14
 7b6:	81 96       	adiw	r24, 0x21	; 33
 7b8:	0e 94 2c 02 	call	0x458	; 0x458 <EEPROM_write>
	_delay_ms(1000);
	LCD_clear();
	
    if(EEPROM_read(STATUS_ADDRES)==NOTPRESSED){
	LCD_send_string("Enter Pass:");
	for (int i=0;i<4;i++)
 7bc:	2f ef       	ldi	r18, 0xFF	; 255
 7be:	e2 1a       	sub	r14, r18
 7c0:	f2 0a       	sbc	r15, r18
 7c2:	84 e0       	ldi	r24, 0x04	; 4
 7c4:	e8 16       	cp	r14, r24
 7c6:	f1 04       	cpc	r15, r1
 7c8:	9c f2       	brlt	.-90     	; 0x770 <main+0x54>
	LCD_move_cursor(1,12+i);
	LCD_send_char('*');
	_delay_ms(500);	
	EEPROM_write(EEPROM_ADDRES1+i,value);
	}
	EEPROM_write(STATUS_ADDRES,0x00);
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	80 e2       	ldi	r24, 0x20	; 32
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 2c 02 	call	0x458	; 0x458 <EEPROM_write>
	}
	
	char arr[4]={NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED};
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	89 83       	std	Y+1, r24	; 0x01
 7d8:	8a 83       	std	Y+2, r24	; 0x02
 7da:	8b 83       	std	Y+3, r24	; 0x03
 7dc:	8c 83       	std	Y+4, r24	; 0x04

int main(void)
{
	char value;
	char flag=0;
	char tries=MAX_TRIES;
 7de:	68 94       	set
 7e0:	ff 24       	eor	r15, r15
 7e2:	f1 f8       	bld	r15, 1
#include "EEPROM.h"

int main(void)
{
	char value;
	char flag=0;
 7e4:	e1 2c       	mov	r14, r1
	}
	EEPROM_write(STATUS_ADDRES,0x00);
	}
	
	char arr[4]={NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED};
    while (flag == 0) 
 7e6:	9a c0       	rjmp	.+308    	; 0x91c <__stack+0xbd>
    {
		LCD_clear();
 7e8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_clear>
		LCD_send_string("check pass:");
 7ec:	84 e8       	ldi	r24, 0x84	; 132
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_send_string>
		for(int i=0;i<4;i++){
 7f4:	00 e0       	ldi	r16, 0x00	; 0
 7f6:	10 e0       	ldi	r17, 0x00	; 0
 7f8:	29 c0       	rjmp	.+82     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			do 
			{
				arr[i]=KEYPAD_read();
 7fa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <KEYPAD_read>
 7fe:	e1 e0       	ldi	r30, 0x01	; 1
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	ec 0f       	add	r30, r28
 804:	fd 1f       	adc	r31, r29
 806:	e0 0f       	add	r30, r16
 808:	f1 1f       	adc	r31, r17
 80a:	80 83       	st	Z, r24
			} while (arr[i]==NOTPRESSED);
 80c:	8f 3f       	cpi	r24, 0xFF	; 255
 80e:	a9 f3       	breq	.-22     	; 0x7fa <main+0xde>
			
			LCD_send_char(arr[i]);
 810:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_send_char>
 814:	9f ef       	ldi	r25, 0xFF	; 255
 816:	24 e3       	ldi	r18, 0x34	; 52
 818:	8c e0       	ldi	r24, 0x0C	; 12
 81a:	91 50       	subi	r25, 0x01	; 1
 81c:	20 40       	sbci	r18, 0x00	; 0
 81e:	80 40       	sbci	r24, 0x00	; 0
 820:	e1 f7       	brne	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 822:	00 c0       	rjmp	.+0      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 824:	00 00       	nop
			_delay_ms(500);
			LCD_move_cursor(1,12+i);
 826:	6c e0       	ldi	r22, 0x0C	; 12
 828:	60 0f       	add	r22, r16
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_move_cursor>
			LCD_send_char('*');
 830:	8a e2       	ldi	r24, 0x2A	; 42
 832:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_send_char>
 836:	9f ef       	ldi	r25, 0xFF	; 255
 838:	24 e3       	ldi	r18, 0x34	; 52
 83a:	8c e0       	ldi	r24, 0x0C	; 12
 83c:	91 50       	subi	r25, 0x01	; 1
 83e:	20 40       	sbci	r18, 0x00	; 0
 840:	80 40       	sbci	r24, 0x00	; 0
 842:	e1 f7       	brne	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 844:	00 c0       	rjmp	.+0      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 846:	00 00       	nop
	char arr[4]={NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED};
    while (flag == 0) 
    {
		LCD_clear();
		LCD_send_string("check pass:");
		for(int i=0;i<4;i++){
 848:	0f 5f       	subi	r16, 0xFF	; 255
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	04 30       	cpi	r16, 0x04	; 4
 84e:	11 05       	cpc	r17, r1
 850:	a4 f2       	brlt	.-88     	; 0x7fa <main+0xde>
			_delay_ms(500);
			LCD_move_cursor(1,12+i);
			LCD_send_char('*');
			_delay_ms(500);
		}
		if(EEPROM_read(EEPROM_ADDRES1)==arr[0] && EEPROM_read(EEPROM_ADDRES2)==arr[1] && EEPROM_read(EEPROM_ADDRES3)==arr[2] && EEPROM_read(EEPROM_ADDRES4)==arr[3]){
 852:	81 e2       	ldi	r24, 0x21	; 33
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 38 02 	call	0x470	; 0x470 <EEPROM_read>
 85a:	99 81       	ldd	r25, Y+1	; 0x01
 85c:	89 13       	cpse	r24, r25
 85e:	26 c0       	rjmp	.+76     	; 0x8ac <__stack+0x4d>
 860:	82 e2       	ldi	r24, 0x22	; 34
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 38 02 	call	0x470	; 0x470 <EEPROM_read>
 868:	9a 81       	ldd	r25, Y+2	; 0x02
 86a:	89 13       	cpse	r24, r25
 86c:	1f c0       	rjmp	.+62     	; 0x8ac <__stack+0x4d>
 86e:	83 e2       	ldi	r24, 0x23	; 35
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 38 02 	call	0x470	; 0x470 <EEPROM_read>
 876:	9b 81       	ldd	r25, Y+3	; 0x03
 878:	89 13       	cpse	r24, r25
 87a:	18 c0       	rjmp	.+48     	; 0x8ac <__stack+0x4d>
 87c:	84 e2       	ldi	r24, 0x24	; 36
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 38 02 	call	0x470	; 0x470 <EEPROM_read>
 884:	9c 81       	ldd	r25, Y+4	; 0x04
 886:	89 13       	cpse	r24, r25
 888:	11 c0       	rjmp	.+34     	; 0x8ac <__stack+0x4d>
		LCD_clear();
 88a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_clear>
		LCD_send_string("right pass");
 88e:	80 e9       	ldi	r24, 0x90	; 144
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_send_string>
		LCD_move_cursor(2,1);
 896:	61 e0       	ldi	r22, 0x01	; 1
 898:	82 e0       	ldi	r24, 0x02	; 2
 89a:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_move_cursor>
		LCD_send_string("safe is opened");
 89e:	8b e9       	ldi	r24, 0x9B	; 155
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_send_string>
		flag=1;	
 8a6:	ee 24       	eor	r14, r14
 8a8:	e3 94       	inc	r14
 8aa:	38 c0       	rjmp	.+112    	; 0x91c <__stack+0xbd>
			
		}else
		{
			tries=tries-1;
 8ac:	1f ef       	ldi	r17, 0xFF	; 255
 8ae:	1f 0d       	add	r17, r15
			if (tries>0)
 8b0:	21 f1       	breq	.+72     	; 0x8fa <__stack+0x9b>
			{
				LCD_clear();
 8b2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_clear>
				LCD_send_string("wrong pass");
 8b6:	8a ea       	ldi	r24, 0xAA	; 170
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_send_string>
 8be:	9f ef       	ldi	r25, 0xFF	; 255
 8c0:	29 e6       	ldi	r18, 0x69	; 105
 8c2:	88 e1       	ldi	r24, 0x18	; 24
 8c4:	91 50       	subi	r25, 0x01	; 1
 8c6:	20 40       	sbci	r18, 0x00	; 0
 8c8:	80 40       	sbci	r24, 0x00	; 0
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <__stack+0x65>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <__stack+0x6f>
 8ce:	00 00       	nop
				_delay_ms(1000);
				LCD_clear();
 8d0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_clear>
				LCD_send_string("# tries left:");
 8d4:	85 eb       	ldi	r24, 0xB5	; 181
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_send_string>
				LCD_send_char(tries+48);
 8dc:	8f e2       	ldi	r24, 0x2F	; 47
 8de:	8f 0d       	add	r24, r15
 8e0:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_send_char>
 8e4:	9f ef       	ldi	r25, 0xFF	; 255
 8e6:	29 e6       	ldi	r18, 0x69	; 105
 8e8:	88 e1       	ldi	r24, 0x18	; 24
 8ea:	91 50       	subi	r25, 0x01	; 1
 8ec:	20 40       	sbci	r18, 0x00	; 0
 8ee:	80 40       	sbci	r24, 0x00	; 0
 8f0:	e1 f7       	brne	.-8      	; 0x8ea <__stack+0x8b>
 8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <__stack+0x95>
 8f4:	00 00       	nop
		LCD_send_string("safe is opened");
		flag=1;	
			
		}else
		{
			tries=tries-1;
 8f6:	f1 2e       	mov	r15, r17
 8f8:	11 c0       	rjmp	.+34     	; 0x91c <__stack+0xbd>
				LCD_send_string("# tries left:");
				LCD_send_char(tries+48);
				_delay_ms(1000);
			}
			else{
				LCD_clear();
 8fa:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_clear>
				LCD_send_string("wrong pass");
 8fe:	8a ea       	ldi	r24, 0xAA	; 170
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_send_string>
				LCD_move_cursor(2,1);
 906:	61 e0       	ldi	r22, 0x01	; 1
 908:	82 e0       	ldi	r24, 0x02	; 2
 90a:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_move_cursor>
				LCD_send_string("safe is closed");
 90e:	83 ec       	ldi	r24, 0xC3	; 195
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_send_string>
		LCD_send_string("safe is opened");
		flag=1;	
			
		}else
		{
			tries=tries-1;
 916:	f1 2e       	mov	r15, r17
			else{
				LCD_clear();
				LCD_send_string("wrong pass");
				LCD_move_cursor(2,1);
				LCD_send_string("safe is closed");
				flag=1;
 918:	ee 24       	eor	r14, r14
 91a:	e3 94       	inc	r14
	}
	EEPROM_write(STATUS_ADDRES,0x00);
	}
	
	char arr[4]={NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED};
    while (flag == 0) 
 91c:	ee 20       	and	r14, r14
 91e:	09 f4       	brne	.+2      	; 0x922 <__stack+0xc3>
 920:	63 cf       	rjmp	.-314    	; 0x7e8 <main+0xcc>
				flag=1;
			}
			
		}
	}
}
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0f 90       	pop	r0
 928:	0f 90       	pop	r0
 92a:	0f 90       	pop	r0
 92c:	0f 90       	pop	r0
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	ff 90       	pop	r15
 938:	ef 90       	pop	r14
 93a:	08 95       	ret

0000093c <_exit>:
 93c:	f8 94       	cli

0000093e <__stop_program>:
 93e:	ff cf       	rjmp	.-2      	; 0x93e <__stop_program>
