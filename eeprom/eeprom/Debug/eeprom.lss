
eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca0  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cf  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000084b  00000000  00000000  00001927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e8  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1b  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000031df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_17>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 32 01 	call	0x264	; 0x264 <main>
  64:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_set_bit_dir>:
		case 'D':
		value=READ_BIT(PIND,bit);
		break;	
	}
	return value;
}
  6c:	82 34       	cpi	r24, 0x42	; 66
  6e:	19 f1       	breq	.+70     	; 0xb6 <DIO_set_bit_dir+0x4a>
  70:	18 f4       	brcc	.+6      	; 0x78 <DIO_set_bit_dir+0xc>
  72:	81 34       	cpi	r24, 0x41	; 65
  74:	39 f0       	breq	.+14     	; 0x84 <DIO_set_bit_dir+0x18>
  76:	08 95       	ret
  78:	83 34       	cpi	r24, 0x43	; 67
  7a:	b1 f1       	breq	.+108    	; 0xe8 <DIO_set_bit_dir+0x7c>
  7c:	84 34       	cpi	r24, 0x44	; 68
  7e:	09 f4       	brne	.+2      	; 0x82 <DIO_set_bit_dir+0x16>
  80:	4c c0       	rjmp	.+152    	; 0x11a <DIO_set_bit_dir+0xae>
  82:	08 95       	ret
  84:	41 30       	cpi	r20, 0x01	; 1
  86:	59 f4       	brne	.+22     	; 0x9e <DIO_set_bit_dir+0x32>
  88:	2a b3       	in	r18, 0x1a	; 26
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <DIO_set_bit_dir+0x28>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	6a 95       	dec	r22
  96:	e2 f7       	brpl	.-8      	; 0x90 <DIO_set_bit_dir+0x24>
  98:	82 2b       	or	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	08 95       	ret
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_set_bit_dir+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_set_bit_dir+0x3a>
  ae:	80 95       	com	r24
  b0:	82 23       	and	r24, r18
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	59 f4       	brne	.+22     	; 0xd0 <DIO_set_bit_dir+0x64>
  ba:	27 b3       	in	r18, 0x17	; 23
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_set_bit_dir+0x5a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_set_bit_dir+0x56>
  ca:	82 2b       	or	r24, r18
  cc:	87 bb       	out	0x17, r24	; 23
  ce:	08 95       	ret
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_set_bit_dir+0x70>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_set_bit_dir+0x6c>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	08 95       	ret
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	59 f4       	brne	.+22     	; 0x102 <DIO_set_bit_dir+0x96>
  ec:	24 b3       	in	r18, 0x14	; 20
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_set_bit_dir+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_set_bit_dir+0x88>
  fc:	82 2b       	or	r24, r18
  fe:	84 bb       	out	0x14, r24	; 20
 100:	08 95       	ret
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_set_bit_dir+0xa2>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_set_bit_dir+0x9e>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	84 bb       	out	0x14, r24	; 20
 118:	08 95       	ret
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <DIO_set_bit_dir+0xc8>
 11e:	21 b3       	in	r18, 0x11	; 17
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_set_bit_dir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_set_bit_dir+0xba>
 12e:	82 2b       	or	r24, r18
 130:	81 bb       	out	0x11, r24	; 17
 132:	08 95       	ret
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_set_bit_dir+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_set_bit_dir+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <DIO_write_bit>:
void DIO_write_bit(unsigned char port,unsigned char bit , unsigned char value){
	switch(port){
 14c:	82 34       	cpi	r24, 0x42	; 66
 14e:	19 f1       	breq	.+70     	; 0x196 <DIO_write_bit+0x4a>
 150:	18 f4       	brcc	.+6      	; 0x158 <DIO_write_bit+0xc>
 152:	81 34       	cpi	r24, 0x41	; 65
 154:	39 f0       	breq	.+14     	; 0x164 <DIO_write_bit+0x18>
 156:	08 95       	ret
 158:	83 34       	cpi	r24, 0x43	; 67
 15a:	b1 f1       	breq	.+108    	; 0x1c8 <DIO_write_bit+0x7c>
 15c:	84 34       	cpi	r24, 0x44	; 68
 15e:	09 f4       	brne	.+2      	; 0x162 <DIO_write_bit+0x16>
 160:	4c c0       	rjmp	.+152    	; 0x1fa <DIO_write_bit+0xae>
 162:	08 95       	ret
		case 'A':
			if (value==1){
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	59 f4       	brne	.+22     	; 0x17e <DIO_write_bit+0x32>
				SET_BIT(PORTA,bit);
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_write_bit+0x28>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_write_bit+0x24>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	08 95       	ret
			}
			else{
				CLR_BIT(PORTA,bit);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_write_bit+0x3e>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_write_bit+0x3a>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
 194:	08 95       	ret
			}
		break;
		case 'B':
			if (value==1){
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	59 f4       	brne	.+22     	; 0x1b0 <DIO_write_bit+0x64>
				SET_BIT(PORTB,bit);
 19a:	28 b3       	in	r18, 0x18	; 24
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_write_bit+0x5a>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_write_bit+0x56>
 1aa:	82 2b       	or	r24, r18
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	08 95       	ret
			}
			else{
				CLR_BIT(PORTB,bit);
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_write_bit+0x70>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_write_bit+0x6c>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
			}			
		break;
		case 'C':
			if (value==1){
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	59 f4       	brne	.+22     	; 0x1e2 <DIO_write_bit+0x96>
				SET_BIT(PORTC,bit);
 1cc:	25 b3       	in	r18, 0x15	; 21
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_write_bit+0x8c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_write_bit+0x88>
 1dc:	82 2b       	or	r24, r18
 1de:	85 bb       	out	0x15, r24	; 21
 1e0:	08 95       	ret
			}
			else{
				CLR_BIT(PORTC,bit);
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_write_bit+0xa2>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_write_bit+0x9e>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
			}
		break;
		case 'D':
			if (value==1){
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	59 f4       	brne	.+22     	; 0x214 <DIO_write_bit+0xc8>
				SET_BIT(PORTD,bit);
 1fe:	22 b3       	in	r18, 0x12	; 18
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_write_bit+0xbe>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_write_bit+0xba>
 20e:	82 2b       	or	r24, r18
 210:	82 bb       	out	0x12, r24	; 18
 212:	08 95       	ret
			}
			else{
				CLR_BIT(PORTD,bit);
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write_bit+0xd4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write_bit+0xd0>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret

0000022c <EEPROM_write>:
	EEARH=(char)adress>>8;	
	// set read enable bit  
	SET_BIT(EECR,EERE);
	
	return EEDR;
}
 22c:	8e bb       	out	0x1e, r24	; 30
 22e:	1f ba       	out	0x1f, r1	; 31
 230:	6d bb       	out	0x1d, r22	; 29
 232:	8c b3       	in	r24, 0x1c	; 28
 234:	84 60       	ori	r24, 0x04	; 4
 236:	8c bb       	out	0x1c, r24	; 28
 238:	8c b3       	in	r24, 0x1c	; 28
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	8c bb       	out	0x1c, r24	; 28
 23e:	e1 99       	sbic	0x1c, 1	; 28
 240:	fe cf       	rjmp	.-4      	; 0x23e <EEPROM_write+0x12>
 242:	08 95       	ret

00000244 <EEPROM_enable_interrupt>:
void EEPROM_enable_interrupt(){
	SET_BIT(EECR,EERIE);
 244:	8c b3       	in	r24, 0x1c	; 28
 246:	88 60       	ori	r24, 0x08	; 8
 248:	8c bb       	out	0x1c, r24	; 28
 24a:	08 95       	ret

0000024c <LED_init>:
 *  Author: remon
 */
#include "DIO.h" 

void LED_init(unsigned char port , unsigned char pin){
	DIO_set_bit_dir(port,pin,1);
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_set_bit_dir>
 252:	08 95       	ret

00000254 <LED_on>:
}
void LED_on(unsigned char port , unsigned char pin){
	DIO_write_bit(port,pin,1);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_write_bit>
 25a:	08 95       	ret

0000025c <LED_off>:
}
void LED_off(unsigned char port , unsigned char pin){
	DIO_write_bit(port,pin,0);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_write_bit>
 262:	08 95       	ret

00000264 <main>:
#include "macros.h"
int main(void)
{
    /* Replace with your application code */
	
	EEPROM_enable_interrupt();
 264:	0e 94 22 01 	call	0x244	; 0x244 <EEPROM_enable_interrupt>
	LED_init('A',0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	81 e4       	ldi	r24, 0x41	; 65
 26c:	0e 94 26 01 	call	0x24c	; 0x24c <LED_init>
	sei();
 270:	78 94       	sei
	EEPROM_write(0x0030,0x50);	
 272:	60 e5       	ldi	r22, 0x50	; 80
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 16 01 	call	0x22c	; 0x22c <EEPROM_write>
    while (1) 
    {
		LED_off('A',0);
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	81 e4       	ldi	r24, 0x41	; 65
 280:	0e 94 2e 01 	call	0x25c	; 0x25c <LED_off>
 284:	fb cf       	rjmp	.-10     	; 0x27c <main+0x18>

00000286 <__vector_17>:
    }
}

ISR(EE_RDY_vect){
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	3f 93       	push	r19
 294:	4f 93       	push	r20
 296:	5f 93       	push	r21
 298:	6f 93       	push	r22
 29a:	7f 93       	push	r23
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
	LED_on('A',0);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	0e 94 2a 01 	call	0x254	; 0x254 <LED_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	83 ed       	ldi	r24, 0xD3	; 211
 2b4:	90 e3       	ldi	r25, 0x30	; 48
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <__vector_17+0x30>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <__vector_17+0x3a>
 2c0:	00 00       	nop
	_delay_ms(2000);
	CLR_BIT(EECR,EERIE);
 2c2:	8c b3       	in	r24, 0x1c	; 28
 2c4:	87 7f       	andi	r24, 0xF7	; 247
 2c6:	8c bb       	out	0x1c, r24	; 28
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
