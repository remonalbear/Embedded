
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0d  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000693  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000529  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000458  00000000  00000000  00001ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000232a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 88 01 	call	0x310	; 0x310 <main>
  64:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_read_bit>:
			break;
	}
}
unsigned char DIO_read_bit(unsigned char port,unsigned char bit){
	unsigned char value;
	switch(port){
  6c:	82 34       	cpi	r24, 0x42	; 66
  6e:	f9 f0       	breq	.+62     	; 0xae <DIO_read_bit+0x42>
  70:	18 f4       	brcc	.+6      	; 0x78 <DIO_read_bit+0xc>
  72:	81 34       	cpi	r24, 0x41	; 65
  74:	39 f0       	breq	.+14     	; 0x84 <DIO_read_bit+0x18>
  76:	59 c0       	rjmp	.+178    	; 0x12a <DIO_read_bit+0xbe>
  78:	83 34       	cpi	r24, 0x43	; 67
  7a:	71 f1       	breq	.+92     	; 0xd8 <DIO_read_bit+0x6c>
  7c:	84 34       	cpi	r24, 0x44	; 68
  7e:	09 f4       	brne	.+2      	; 0x82 <DIO_read_bit+0x16>
  80:	40 c0       	rjmp	.+128    	; 0x102 <DIO_read_bit+0x96>
  82:	53 c0       	rjmp	.+166    	; 0x12a <DIO_read_bit+0xbe>
		case 'A':
			value=READ_BIT(PINA,bit);
  84:	49 b3       	in	r20, 0x19	; 25
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	9c 01       	movw	r18, r24
  8c:	06 2e       	mov	r0, r22
  8e:	02 c0       	rjmp	.+4      	; 0x94 <DIO_read_bit+0x28>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <DIO_read_bit+0x24>
  98:	84 2f       	mov	r24, r20
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	82 23       	and	r24, r18
  9e:	93 23       	and	r25, r19
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_read_bit+0x3a>
  a2:	96 95       	lsr	r25
  a4:	87 95       	ror	r24
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_read_bit+0x36>
  aa:	98 2f       	mov	r25, r24
		break;
  ac:	3e c0       	rjmp	.+124    	; 0x12a <DIO_read_bit+0xbe>
		case 'B':
			value=READ_BIT(PINB,bit);
  ae:	46 b3       	in	r20, 0x16	; 22
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	9c 01       	movw	r18, r24
  b6:	06 2e       	mov	r0, r22
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_read_bit+0x52>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_read_bit+0x4e>
  c2:	84 2f       	mov	r24, r20
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	82 23       	and	r24, r18
  c8:	93 23       	and	r25, r19
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_read_bit+0x64>
  cc:	96 95       	lsr	r25
  ce:	87 95       	ror	r24
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_read_bit+0x60>
  d4:	98 2f       	mov	r25, r24
		break;
  d6:	29 c0       	rjmp	.+82     	; 0x12a <DIO_read_bit+0xbe>
		case 'C':
		value=READ_BIT(PINC,bit);
  d8:	43 b3       	in	r20, 0x13	; 19
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	9c 01       	movw	r18, r24
  e0:	06 2e       	mov	r0, r22
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_read_bit+0x7c>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_read_bit+0x78>
  ec:	84 2f       	mov	r24, r20
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	82 23       	and	r24, r18
  f2:	93 23       	and	r25, r19
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_read_bit+0x8e>
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_read_bit+0x8a>
  fe:	98 2f       	mov	r25, r24
		break;
 100:	14 c0       	rjmp	.+40     	; 0x12a <DIO_read_bit+0xbe>
		case 'D':
		value=READ_BIT(PIND,bit);
 102:	40 b3       	in	r20, 0x10	; 16
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	9c 01       	movw	r18, r24
 10a:	06 2e       	mov	r0, r22
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_read_bit+0xa6>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_read_bit+0xa2>
 116:	84 2f       	mov	r24, r20
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	82 23       	and	r24, r18
 11c:	93 23       	and	r25, r19
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_read_bit+0xb8>
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_read_bit+0xb4>
 128:	98 2f       	mov	r25, r24
		break;	
	}
	return value;
}
 12a:	89 2f       	mov	r24, r25
 12c:	08 95       	ret

0000012e <DIO_write_bit>:
void DIO_write_bit(unsigned char port,unsigned char bit , unsigned char value){
	switch(port){
 12e:	82 34       	cpi	r24, 0x42	; 66
 130:	19 f1       	breq	.+70     	; 0x178 <DIO_write_bit+0x4a>
 132:	18 f4       	brcc	.+6      	; 0x13a <DIO_write_bit+0xc>
 134:	81 34       	cpi	r24, 0x41	; 65
 136:	39 f0       	breq	.+14     	; 0x146 <DIO_write_bit+0x18>
 138:	08 95       	ret
 13a:	83 34       	cpi	r24, 0x43	; 67
 13c:	b1 f1       	breq	.+108    	; 0x1aa <DIO_write_bit+0x7c>
 13e:	84 34       	cpi	r24, 0x44	; 68
 140:	09 f4       	brne	.+2      	; 0x144 <DIO_write_bit+0x16>
 142:	4c c0       	rjmp	.+152    	; 0x1dc <DIO_write_bit+0xae>
 144:	08 95       	ret
		case 'A':
			if (value==1){
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	59 f4       	brne	.+22     	; 0x160 <DIO_write_bit+0x32>
				SET_BIT(PORTA,bit);
 14a:	2b b3       	in	r18, 0x1b	; 27
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_write_bit+0x28>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_write_bit+0x24>
 15a:	82 2b       	or	r24, r18
 15c:	8b bb       	out	0x1b, r24	; 27
 15e:	08 95       	ret
			}
			else{
				CLR_BIT(PORTA,bit);
 160:	2b b3       	in	r18, 0x1b	; 27
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_write_bit+0x3e>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_write_bit+0x3a>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	8b bb       	out	0x1b, r24	; 27
 176:	08 95       	ret
			}
		break;
		case 'B':
			if (value==1){
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	59 f4       	brne	.+22     	; 0x192 <DIO_write_bit+0x64>
				SET_BIT(PORTB,bit);
 17c:	28 b3       	in	r18, 0x18	; 24
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_write_bit+0x5a>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_write_bit+0x56>
 18c:	82 2b       	or	r24, r18
 18e:	88 bb       	out	0x18, r24	; 24
 190:	08 95       	ret
			}
			else{
				CLR_BIT(PORTB,bit);
 192:	28 b3       	in	r18, 0x18	; 24
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_write_bit+0x70>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_write_bit+0x6c>
 1a2:	80 95       	com	r24
 1a4:	82 23       	and	r24, r18
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	08 95       	ret
			}			
		break;
		case 'C':
			if (value==1){
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	59 f4       	brne	.+22     	; 0x1c4 <DIO_write_bit+0x96>
				SET_BIT(PORTC,bit);
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_write_bit+0x8c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_write_bit+0x88>
 1be:	82 2b       	or	r24, r18
 1c0:	85 bb       	out	0x15, r24	; 21
 1c2:	08 95       	ret
			}
			else{
				CLR_BIT(PORTC,bit);
 1c4:	25 b3       	in	r18, 0x15	; 21
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_write_bit+0xa2>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_write_bit+0x9e>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	85 bb       	out	0x15, r24	; 21
 1da:	08 95       	ret
			}
		break;
		case 'D':
			if (value==1){
 1dc:	41 30       	cpi	r20, 0x01	; 1
 1de:	59 f4       	brne	.+22     	; 0x1f6 <DIO_write_bit+0xc8>
				SET_BIT(PORTD,bit);
 1e0:	22 b3       	in	r18, 0x12	; 18
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_write_bit+0xbe>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_write_bit+0xba>
 1f0:	82 2b       	or	r24, r18
 1f2:	82 bb       	out	0x12, r24	; 18
 1f4:	08 95       	ret
			}
			else{
				CLR_BIT(PORTD,bit);
 1f6:	22 b3       	in	r18, 0x12	; 18
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write_bit+0xd4>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write_bit+0xd0>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	08 95       	ret

0000020e <DIO_toggle_bit>:
			}
		break;	
	}
}
void DIO_toggle_bit(unsigned char port,unsigned char bit){
		switch(port){
 20e:	82 34       	cpi	r24, 0x42	; 66
 210:	a1 f0       	breq	.+40     	; 0x23a <DIO_toggle_bit+0x2c>
 212:	18 f4       	brcc	.+6      	; 0x21a <DIO_toggle_bit+0xc>
 214:	81 34       	cpi	r24, 0x41	; 65
 216:	31 f0       	breq	.+12     	; 0x224 <DIO_toggle_bit+0x16>
 218:	08 95       	ret
 21a:	83 34       	cpi	r24, 0x43	; 67
 21c:	c9 f0       	breq	.+50     	; 0x250 <DIO_toggle_bit+0x42>
 21e:	84 34       	cpi	r24, 0x44	; 68
 220:	11 f1       	breq	.+68     	; 0x266 <DIO_toggle_bit+0x58>
 222:	08 95       	ret
			case 'A':
				TOG_BIT(PINA,bit);
 224:	29 b3       	in	r18, 0x19	; 25
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_toggle_bit+0x22>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_toggle_bit+0x1e>
 234:	82 27       	eor	r24, r18
 236:	89 bb       	out	0x19, r24	; 25
			break;
 238:	08 95       	ret
			case 'B':
				TOG_BIT(PINB,bit);
 23a:	26 b3       	in	r18, 0x16	; 22
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_toggle_bit+0x38>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_toggle_bit+0x34>
 24a:	82 27       	eor	r24, r18
 24c:	86 bb       	out	0x16, r24	; 22
			break;
 24e:	08 95       	ret
			case 'C':
				TOG_BIT(PINC,bit);
 250:	23 b3       	in	r18, 0x13	; 19
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_toggle_bit+0x4e>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_toggle_bit+0x4a>
 260:	82 27       	eor	r24, r18
 262:	83 bb       	out	0x13, r24	; 19
			break;
 264:	08 95       	ret
			case 'D':
				TOG_BIT(PIND,bit);
 266:	20 b3       	in	r18, 0x10	; 16
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_toggle_bit+0x64>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_toggle_bit+0x60>
 276:	82 27       	eor	r24, r18
 278:	80 bb       	out	0x10, r24	; 16
 27a:	08 95       	ret

0000027c <DIO_set_port_dir>:
			break;
	}
}
void DIO_set_port_dir(unsigned char port , unsigned char dir){
	switch(port){
 27c:	82 34       	cpi	r24, 0x42	; 66
 27e:	81 f0       	breq	.+32     	; 0x2a0 <DIO_set_port_dir+0x24>
 280:	18 f4       	brcc	.+6      	; 0x288 <DIO_set_port_dir+0xc>
 282:	81 34       	cpi	r24, 0x41	; 65
 284:	31 f0       	breq	.+12     	; 0x292 <DIO_set_port_dir+0x16>
 286:	08 95       	ret
 288:	83 34       	cpi	r24, 0x43	; 67
 28a:	89 f0       	breq	.+34     	; 0x2ae <DIO_set_port_dir+0x32>
 28c:	84 34       	cpi	r24, 0x44	; 68
 28e:	b1 f0       	breq	.+44     	; 0x2bc <DIO_set_port_dir+0x40>
 290:	08 95       	ret
		case 'A':
		if (dir==1){
 292:	61 30       	cpi	r22, 0x01	; 1
 294:	19 f4       	brne	.+6      	; 0x29c <DIO_set_port_dir+0x20>
			DDRA=0xff;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	8a bb       	out	0x1a, r24	; 26
 29a:	08 95       	ret
		}
		else{
			DDRA=0x00;
 29c:	1a ba       	out	0x1a, r1	; 26
 29e:	08 95       	ret
		}
		break;
		case 'B':
		if (dir==1){
 2a0:	61 30       	cpi	r22, 0x01	; 1
 2a2:	19 f4       	brne	.+6      	; 0x2aa <DIO_set_port_dir+0x2e>
			DDRB=0xff;
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	87 bb       	out	0x17, r24	; 23
 2a8:	08 95       	ret
		}
		else{
			DDRB=0x00;
 2aa:	17 ba       	out	0x17, r1	; 23
 2ac:	08 95       	ret
		}
		break;
		case 'C':
		if (dir==1){
 2ae:	61 30       	cpi	r22, 0x01	; 1
 2b0:	19 f4       	brne	.+6      	; 0x2b8 <DIO_set_port_dir+0x3c>
			DDRC=0xff;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	84 bb       	out	0x14, r24	; 20
 2b6:	08 95       	ret
		}
		else{
			DDRC=0x00;
 2b8:	14 ba       	out	0x14, r1	; 20
 2ba:	08 95       	ret
		}
		break;
		case 'D':
		if (dir==1){
 2bc:	61 30       	cpi	r22, 0x01	; 1
 2be:	19 f4       	brne	.+6      	; 0x2c6 <DIO_set_port_dir+0x4a>
			DDRD=0xff;
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	81 bb       	out	0x11, r24	; 17
 2c4:	08 95       	ret
		}
		else{
			DDRD=0x00;
 2c6:	11 ba       	out	0x11, r1	; 17
 2c8:	08 95       	ret

000002ca <DIO_write_port>:
		}
		break;
	}
}
void DIO_write_port(unsigned char port, unsigned char value){
	switch(port){
 2ca:	82 34       	cpi	r24, 0x42	; 66
 2cc:	51 f0       	breq	.+20     	; 0x2e2 <DIO_write_port+0x18>
 2ce:	18 f4       	brcc	.+6      	; 0x2d6 <DIO_write_port+0xc>
 2d0:	81 34       	cpi	r24, 0x41	; 65
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <DIO_write_port+0x16>
 2d4:	08 95       	ret
 2d6:	83 34       	cpi	r24, 0x43	; 67
 2d8:	29 f0       	breq	.+10     	; 0x2e4 <DIO_write_port+0x1a>
 2da:	84 34       	cpi	r24, 0x44	; 68
 2dc:	29 f0       	breq	.+10     	; 0x2e8 <DIO_write_port+0x1e>
 2de:	08 95       	ret
		case 'A':
			PORTA=value;
 2e0:	6b bb       	out	0x1b, r22	; 27
		case 'B':
			PORTB=value;
 2e2:	68 bb       	out	0x18, r22	; 24
		case 'C':
			PORTC=value;
 2e4:	65 bb       	out	0x15, r22	; 21
		break;
 2e6:	08 95       	ret
		case 'D':
			PORTD=value;
 2e8:	62 bb       	out	0x12, r22	; 18
 2ea:	08 95       	ret

000002ec <DIO_read_port>:
		break;	
	}
}
unsigned char DIO_read_port(unsigned char port){
		unsigned char value;
		switch(port){
 2ec:	82 34       	cpi	r24, 0x42	; 66
 2ee:	51 f0       	breq	.+20     	; 0x304 <DIO_read_port+0x18>
 2f0:	18 f4       	brcc	.+6      	; 0x2f8 <DIO_read_port+0xc>
 2f2:	81 34       	cpi	r24, 0x41	; 65
 2f4:	31 f0       	breq	.+12     	; 0x302 <DIO_read_port+0x16>
 2f6:	0a c0       	rjmp	.+20     	; 0x30c <DIO_read_port+0x20>
 2f8:	83 34       	cpi	r24, 0x43	; 67
 2fa:	29 f0       	breq	.+10     	; 0x306 <DIO_read_port+0x1a>
 2fc:	84 34       	cpi	r24, 0x44	; 68
 2fe:	29 f0       	breq	.+10     	; 0x30a <DIO_read_port+0x1e>
 300:	05 c0       	rjmp	.+10     	; 0x30c <DIO_read_port+0x20>
			case 'A':
				value=PINA;;
 302:	89 b3       	in	r24, 0x19	; 25
			case 'B':
				value=PINB;
 304:	86 b3       	in	r24, 0x16	; 22
			case 'C':
				value=PINC;
 306:	93 b3       	in	r25, 0x13	; 19
			break;
 308:	01 c0       	rjmp	.+2      	; 0x30c <DIO_read_port+0x20>
			case 'D':
				value=PIND;
 30a:	90 b3       	in	r25, 0x10	; 16
			break;
}
	return value;
 30c:	89 2f       	mov	r24, r25
 30e:	08 95       	ret

00000310 <main>:
#include "DIO.h"

int main(void)
{
    /* Replace with your application code */
	DIO_set_port_dir('A',1);
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	81 e4       	ldi	r24, 0x41	; 65
 314:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_set_port_dir>
	DIO_set_port_dir('C',0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	83 e4       	ldi	r24, 0x43	; 67
 31c:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_set_port_dir>
    while (1) 
    {
		unsigned char test_port,test_pin;
		DIO_write_port('A',0xff);
 320:	6f ef       	ldi	r22, 0xFF	; 255
 322:	81 e4       	ldi	r24, 0x41	; 65
 324:	0e 94 65 01 	call	0x2ca	; 0x2ca <DIO_write_port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	89 e6       	ldi	r24, 0x69	; 105
 32c:	98 e1       	ldi	r25, 0x18	; 24
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x1e>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x28>
 338:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x00);
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	81 e4       	ldi	r24, 0x41	; 65
 33e:	0e 94 65 01 	call	0x2ca	; 0x2ca <DIO_write_port>
		DIO_toggle_bit('A',5);
 342:	65 e0       	ldi	r22, 0x05	; 5
 344:	81 e4       	ldi	r24, 0x41	; 65
 346:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_toggle_bit>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	89 e6       	ldi	r24, 0x69	; 105
 34e:	98 e1       	ldi	r25, 0x18	; 24
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x40>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x4a>
 35a:	00 00       	nop
		_delay_ms(1000);
		test_port=DIO_read_port('C');
 35c:	83 e4       	ldi	r24, 0x43	; 67
 35e:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_read_port>
		if(test_port==2){
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	71 f4       	brne	.+28     	; 0x382 <main+0x72>
			DIO_write_bit('A',3,1);
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	81 e4       	ldi	r24, 0x41	; 65
 36c:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_write_bit>
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	89 e6       	ldi	r24, 0x69	; 105
 374:	98 e1       	ldi	r25, 0x18	; 24
 376:	21 50       	subi	r18, 0x01	; 1
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x66>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x70>
 380:	00 00       	nop
			_delay_ms(1000);	
		}
		test_pin=DIO_read_bit('C',7);
 382:	67 e0       	ldi	r22, 0x07	; 7
 384:	83 e4       	ldi	r24, 0x43	; 67
 386:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_read_bit>
		if(test_pin==1){
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	49 f6       	brne	.-110    	; 0x320 <main+0x10>
			DIO_write_bit('A',1,1);
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	81 e4       	ldi	r24, 0x41	; 65
 394:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_write_bit>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	89 e6       	ldi	r24, 0x69	; 105
 39c:	98 e1       	ldi	r25, 0x18	; 24
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0x8e>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x98>
 3a8:	00 00       	nop
 3aa:	ba cf       	rjmp	.-140    	; 0x320 <main+0x10>

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
