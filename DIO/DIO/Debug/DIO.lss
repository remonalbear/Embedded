
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009dd  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000693  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000523  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000458  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 18 01 	call	0x230	; 0x230 <main>
  64:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_read_bit>:
		case 'D':
			if (value==1){
				SET_BIT(PORTD,bit);
			}
			else{
				CLR_BIT(PORTD,bit);
  6c:	82 34       	cpi	r24, 0x42	; 66
  6e:	f9 f0       	breq	.+62     	; 0xae <DIO_read_bit+0x42>
  70:	18 f4       	brcc	.+6      	; 0x78 <DIO_read_bit+0xc>
  72:	81 34       	cpi	r24, 0x41	; 65
  74:	39 f0       	breq	.+14     	; 0x84 <DIO_read_bit+0x18>
  76:	59 c0       	rjmp	.+178    	; 0x12a <DIO_read_bit+0xbe>
  78:	83 34       	cpi	r24, 0x43	; 67
  7a:	71 f1       	breq	.+92     	; 0xd8 <DIO_read_bit+0x6c>
  7c:	84 34       	cpi	r24, 0x44	; 68
  7e:	09 f4       	brne	.+2      	; 0x82 <DIO_read_bit+0x16>
  80:	40 c0       	rjmp	.+128    	; 0x102 <DIO_read_bit+0x96>
  82:	53 c0       	rjmp	.+166    	; 0x12a <DIO_read_bit+0xbe>
  84:	49 b3       	in	r20, 0x19	; 25
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	9c 01       	movw	r18, r24
  8c:	06 2e       	mov	r0, r22
  8e:	02 c0       	rjmp	.+4      	; 0x94 <DIO_read_bit+0x28>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <DIO_read_bit+0x24>
  98:	84 2f       	mov	r24, r20
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	82 23       	and	r24, r18
  9e:	93 23       	and	r25, r19
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_read_bit+0x3a>
  a2:	96 95       	lsr	r25
  a4:	87 95       	ror	r24
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_read_bit+0x36>
  aa:	98 2f       	mov	r25, r24
  ac:	3e c0       	rjmp	.+124    	; 0x12a <DIO_read_bit+0xbe>
  ae:	46 b3       	in	r20, 0x16	; 22
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	9c 01       	movw	r18, r24
  b6:	06 2e       	mov	r0, r22
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_read_bit+0x52>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_read_bit+0x4e>
  c2:	84 2f       	mov	r24, r20
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	82 23       	and	r24, r18
  c8:	93 23       	and	r25, r19
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_read_bit+0x64>
  cc:	96 95       	lsr	r25
  ce:	87 95       	ror	r24
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_read_bit+0x60>
  d4:	98 2f       	mov	r25, r24
  d6:	29 c0       	rjmp	.+82     	; 0x12a <DIO_read_bit+0xbe>
  d8:	43 b3       	in	r20, 0x13	; 19
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	9c 01       	movw	r18, r24
  e0:	06 2e       	mov	r0, r22
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_read_bit+0x7c>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_read_bit+0x78>
  ec:	84 2f       	mov	r24, r20
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	82 23       	and	r24, r18
  f2:	93 23       	and	r25, r19
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_read_bit+0x8e>
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_read_bit+0x8a>
  fe:	98 2f       	mov	r25, r24
 100:	14 c0       	rjmp	.+40     	; 0x12a <DIO_read_bit+0xbe>
 102:	40 b3       	in	r20, 0x10	; 16
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	9c 01       	movw	r18, r24
 10a:	06 2e       	mov	r0, r22
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_read_bit+0xa6>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_read_bit+0xa2>
 116:	84 2f       	mov	r24, r20
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	82 23       	and	r24, r18
 11c:	93 23       	and	r25, r19
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_read_bit+0xb8>
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_read_bit+0xb4>
 128:	98 2f       	mov	r25, r24
 12a:	89 2f       	mov	r24, r25
 12c:	08 95       	ret

0000012e <DIO_toggle_bit>:
			}
		break;	
	}
}
void DIO_toggle_bit(unsigned char port,unsigned char bit){
		switch(port){
 12e:	82 34       	cpi	r24, 0x42	; 66
 130:	a1 f0       	breq	.+40     	; 0x15a <DIO_toggle_bit+0x2c>
 132:	18 f4       	brcc	.+6      	; 0x13a <DIO_toggle_bit+0xc>
 134:	81 34       	cpi	r24, 0x41	; 65
 136:	31 f0       	breq	.+12     	; 0x144 <DIO_toggle_bit+0x16>
 138:	08 95       	ret
 13a:	83 34       	cpi	r24, 0x43	; 67
 13c:	c9 f0       	breq	.+50     	; 0x170 <DIO_toggle_bit+0x42>
 13e:	84 34       	cpi	r24, 0x44	; 68
 140:	11 f1       	breq	.+68     	; 0x186 <DIO_toggle_bit+0x58>
 142:	08 95       	ret
			case 'A':
				TOG_BIT(PINA,bit);
 144:	29 b3       	in	r18, 0x19	; 25
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_toggle_bit+0x22>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_toggle_bit+0x1e>
 154:	82 27       	eor	r24, r18
 156:	89 bb       	out	0x19, r24	; 25
			break;
 158:	08 95       	ret
			case 'B':
				TOG_BIT(PINB,bit);
 15a:	26 b3       	in	r18, 0x16	; 22
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_toggle_bit+0x38>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_toggle_bit+0x34>
 16a:	82 27       	eor	r24, r18
 16c:	86 bb       	out	0x16, r24	; 22
			break;
 16e:	08 95       	ret
			case 'C':
				TOG_BIT(PINC,bit);
 170:	23 b3       	in	r18, 0x13	; 19
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_toggle_bit+0x4e>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_toggle_bit+0x4a>
 180:	82 27       	eor	r24, r18
 182:	83 bb       	out	0x13, r24	; 19
			break;
 184:	08 95       	ret
			case 'D':
				TOG_BIT(PIND,bit);
 186:	20 b3       	in	r18, 0x10	; 16
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_toggle_bit+0x64>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_toggle_bit+0x60>
 196:	82 27       	eor	r24, r18
 198:	80 bb       	out	0x10, r24	; 16
 19a:	08 95       	ret

0000019c <DIO_set_port_dir>:
			break;
	}
}
void DIO_set_port_dir(unsigned char port , unsigned char dir){
	switch(port){
 19c:	82 34       	cpi	r24, 0x42	; 66
 19e:	81 f0       	breq	.+32     	; 0x1c0 <DIO_set_port_dir+0x24>
 1a0:	18 f4       	brcc	.+6      	; 0x1a8 <DIO_set_port_dir+0xc>
 1a2:	81 34       	cpi	r24, 0x41	; 65
 1a4:	31 f0       	breq	.+12     	; 0x1b2 <DIO_set_port_dir+0x16>
 1a6:	08 95       	ret
 1a8:	83 34       	cpi	r24, 0x43	; 67
 1aa:	89 f0       	breq	.+34     	; 0x1ce <DIO_set_port_dir+0x32>
 1ac:	84 34       	cpi	r24, 0x44	; 68
 1ae:	b1 f0       	breq	.+44     	; 0x1dc <DIO_set_port_dir+0x40>
 1b0:	08 95       	ret
		case 'A':
		if (dir==1){
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	19 f4       	brne	.+6      	; 0x1bc <DIO_set_port_dir+0x20>
			DDRA=0xff;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	08 95       	ret
		}
		else{
			DDRA=0x00;
 1bc:	1a ba       	out	0x1a, r1	; 26
 1be:	08 95       	ret
		}
		break;
		case 'B':
		if (dir==1){
 1c0:	61 30       	cpi	r22, 0x01	; 1
 1c2:	19 f4       	brne	.+6      	; 0x1ca <DIO_set_port_dir+0x2e>
			DDRB=0xff;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	87 bb       	out	0x17, r24	; 23
 1c8:	08 95       	ret
		}
		else{
			DDRB=0x00;
 1ca:	17 ba       	out	0x17, r1	; 23
 1cc:	08 95       	ret
		}
		break;
		case 'C':
		if (dir==1){
 1ce:	61 30       	cpi	r22, 0x01	; 1
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <DIO_set_port_dir+0x3c>
			DDRC=0xff;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	84 bb       	out	0x14, r24	; 20
 1d6:	08 95       	ret
		}
		else{
			DDRC=0x00;
 1d8:	14 ba       	out	0x14, r1	; 20
 1da:	08 95       	ret
		}
		break;
		case 'D':
		if (dir==1){
 1dc:	61 30       	cpi	r22, 0x01	; 1
 1de:	19 f4       	brne	.+6      	; 0x1e6 <DIO_set_port_dir+0x4a>
			DDRD=0xff;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	81 bb       	out	0x11, r24	; 17
 1e4:	08 95       	ret
		}
		else{
			DDRD=0x00;
 1e6:	11 ba       	out	0x11, r1	; 17
 1e8:	08 95       	ret

000001ea <DIO_write_port>:
		}
		break;
	}
}
void DIO_write_port(unsigned char port, unsigned char value){
	switch(port){
 1ea:	82 34       	cpi	r24, 0x42	; 66
 1ec:	51 f0       	breq	.+20     	; 0x202 <DIO_write_port+0x18>
 1ee:	18 f4       	brcc	.+6      	; 0x1f6 <DIO_write_port+0xc>
 1f0:	81 34       	cpi	r24, 0x41	; 65
 1f2:	31 f0       	breq	.+12     	; 0x200 <DIO_write_port+0x16>
 1f4:	08 95       	ret
 1f6:	83 34       	cpi	r24, 0x43	; 67
 1f8:	29 f0       	breq	.+10     	; 0x204 <DIO_write_port+0x1a>
 1fa:	84 34       	cpi	r24, 0x44	; 68
 1fc:	29 f0       	breq	.+10     	; 0x208 <DIO_write_port+0x1e>
 1fe:	08 95       	ret
		case 'A':
			PORTA=value;
 200:	6b bb       	out	0x1b, r22	; 27
		case 'B':
			PORTB=value;
 202:	68 bb       	out	0x18, r22	; 24
		case 'C':
			PORTC=value;
 204:	65 bb       	out	0x15, r22	; 21
		break;
 206:	08 95       	ret
		case 'D':
			PORTD=value;
 208:	62 bb       	out	0x12, r22	; 18
 20a:	08 95       	ret

0000020c <DIO_read_port>:
		break;	
	}
}
unsigned char DIO_read_port(unsigned char port){
		unsigned char value;
		switch(port){
 20c:	82 34       	cpi	r24, 0x42	; 66
 20e:	51 f0       	breq	.+20     	; 0x224 <DIO_read_port+0x18>
 210:	18 f4       	brcc	.+6      	; 0x218 <DIO_read_port+0xc>
 212:	81 34       	cpi	r24, 0x41	; 65
 214:	31 f0       	breq	.+12     	; 0x222 <DIO_read_port+0x16>
 216:	0a c0       	rjmp	.+20     	; 0x22c <DIO_read_port+0x20>
 218:	83 34       	cpi	r24, 0x43	; 67
 21a:	29 f0       	breq	.+10     	; 0x226 <DIO_read_port+0x1a>
 21c:	84 34       	cpi	r24, 0x44	; 68
 21e:	29 f0       	breq	.+10     	; 0x22a <DIO_read_port+0x1e>
 220:	05 c0       	rjmp	.+10     	; 0x22c <DIO_read_port+0x20>
			case 'A':
				value=PINA;;
 222:	89 b3       	in	r24, 0x19	; 25
			case 'B':
				value=PINB;
 224:	86 b3       	in	r24, 0x16	; 22
			case 'C':
				value=PINC;
 226:	93 b3       	in	r25, 0x13	; 19
			break;
 228:	01 c0       	rjmp	.+2      	; 0x22c <DIO_read_port+0x20>
			case 'D':
				value=PIND;
 22a:	90 b3       	in	r25, 0x10	; 16
			break;
}
	return value;
 22c:	89 2f       	mov	r24, r25
 22e:	08 95       	ret

00000230 <main>:
#include "DIO.h"

int main(void)
{
    /* Replace with your application code */
	DIO_set_port_dir('A',1);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	81 e4       	ldi	r24, 0x41	; 65
 234:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_set_port_dir>
	DIO_set_port_dir('C',0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	83 e4       	ldi	r24, 0x43	; 67
 23c:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_set_port_dir>
    while (1) 
    {
		unsigned char test_port,test_pin;
		DIO_write_port('A',0xff);
 240:	6f ef       	ldi	r22, 0xFF	; 255
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_write_port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	89 e6       	ldi	r24, 0x69	; 105
 24c:	98 e1       	ldi	r25, 0x18	; 24
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x1e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x28>
 258:	00 00       	nop
		_delay_ms(1000);
		DIO_write_port('A',0x00);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	81 e4       	ldi	r24, 0x41	; 65
 25e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_write_port>
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	89 e6       	ldi	r24, 0x69	; 105
 266:	98 e1       	ldi	r25, 0x18	; 24
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x38>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x42>
 272:	00 00       	nop
		_delay_ms(1000);
		test_port=DIO_read_port('C');
 274:	83 e4       	ldi	r24, 0x43	; 67
 276:	0e 94 06 01 	call	0x20c	; 0x20c <DIO_read_port>
		if(test_port==2){
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	69 f4       	brne	.+26     	; 0x298 <main+0x68>
			DIO_toggle_bit('A',3);
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	81 e4       	ldi	r24, 0x41	; 65
 282:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_toggle_bit>
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	89 e6       	ldi	r24, 0x69	; 105
 28a:	98 e1       	ldi	r25, 0x18	; 24
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x5c>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x66>
 296:	00 00       	nop
			_delay_ms(1000);	
		}
		test_pin=DIO_read_bit('C',7);
 298:	67 e0       	ldi	r22, 0x07	; 7
 29a:	83 e4       	ldi	r24, 0x43	; 67
 29c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_read_bit>
		if(test_pin==1){
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	71 f6       	brne	.-100    	; 0x240 <main+0x10>
			DIO_toggle_bit('A',1);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	81 e4       	ldi	r24, 0x41	; 65
 2a8:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_toggle_bit>
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	89 e6       	ldi	r24, 0x69	; 105
 2b0:	98 e1       	ldi	r25, 0x18	; 24
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x82>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x8c>
 2bc:	00 00       	nop
 2be:	c0 cf       	rjmp	.-128    	; 0x240 <main+0x10>

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
