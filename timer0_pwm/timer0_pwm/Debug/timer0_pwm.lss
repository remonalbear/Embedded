
timer0_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066c  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000305  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  000013d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "TIMER.h"

int main(void)
{
    /* Replace with your application code */
	TIMER_init0_PWM(64);
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	0e 94 3a 00 	call	0x74	; 0x74 <TIMER_init0_PWM>
  72:	ff cf       	rjmp	.-2      	; 0x72 <main+0x6>

00000074 <TIMER_init0_PWM>:
	SET_BIT(TCCR0,COM00);
	CLR_BIT(TCCR0,COM01);
}

void TIMER_init0_PWM(unsigned char value){
	SET_BIT(DDRB,3);
  74:	97 b3       	in	r25, 0x17	; 23
  76:	98 60       	ori	r25, 0x08	; 8
  78:	97 bb       	out	0x17, r25	; 23
	//select mode
	SET_BIT(TCCR0,WGM01);
  7a:	93 b7       	in	r25, 0x33	; 51
  7c:	98 60       	ori	r25, 0x08	; 8
  7e:	93 bf       	out	0x33, r25	; 51
	SET_BIT(TCCR0,WGM00);
  80:	93 b7       	in	r25, 0x33	; 51
  82:	90 64       	ori	r25, 0x40	; 64
  84:	93 bf       	out	0x33, r25	; 51
	//compare value
	OCR0=value;
  86:	8c bf       	out	0x3c, r24	; 60
	//define clock(pre scalar)
	SET_BIT(TCCR0,CS00);
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	8d 7f       	andi	r24, 0xFD	; 253
  92:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
  94:	83 b7       	in	r24, 0x33	; 51
  96:	84 60       	ori	r24, 0x04	; 4
  98:	83 bf       	out	0x33, r24	; 51
	//set OC0 on compare match ,clear at bottom (inverting mode)
	//SET_BIT(TCCR0,COM00);
	//SET_BIT(TCCR0,COM01);
	//clear OC0 on compare match ,set at bottom (non-inverting mode)
	SET_BIT(TCCR0,COM01);
  9a:	83 b7       	in	r24, 0x33	; 51
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	83 bf       	out	0x33, r24	; 51
  a0:	08 95       	ret

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
