
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000364  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8f  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f2  00000000  00000000  0000119b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000763  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000084b  00000000  00000000  000026c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 01 	call	0x282	; 0x282 <main>
  7a:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <BUTTON_init>:
 *  Author: remon
 */ 
#include "DIO.h"

void BUTTON_init(unsigned char port , unsigned char pin){
	DIO_set_bit_dir(port,pin,0);
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	0e 94 48 00 	call	0x90	; 0x90 <DIO_set_bit_dir>
  88:	08 95       	ret

0000008a <BUTTON_read>:
}
unsigned char BUTTON_read(unsigned char port , unsigned char pin){
	unsigned char value;
	value=DIO_read_bit(port,pin);
  8a:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_read_bit>
	return value;
  8e:	08 95       	ret

00000090 <DIO_set_bit_dir>:
		case 'D':
		if (connect==1){
			SET_BIT(PORTD,bit);
		}
		else{
			CLR_BIT(PORTD,bit);
  90:	82 34       	cpi	r24, 0x42	; 66
  92:	19 f1       	breq	.+70     	; 0xda <DIO_set_bit_dir+0x4a>
  94:	18 f4       	brcc	.+6      	; 0x9c <DIO_set_bit_dir+0xc>
  96:	81 34       	cpi	r24, 0x41	; 65
  98:	39 f0       	breq	.+14     	; 0xa8 <DIO_set_bit_dir+0x18>
  9a:	08 95       	ret
  9c:	83 34       	cpi	r24, 0x43	; 67
  9e:	b1 f1       	breq	.+108    	; 0x10c <DIO_set_bit_dir+0x7c>
  a0:	84 34       	cpi	r24, 0x44	; 68
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_set_bit_dir+0x16>
  a4:	4c c0       	rjmp	.+152    	; 0x13e <DIO_set_bit_dir+0xae>
  a6:	08 95       	ret
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	59 f4       	brne	.+22     	; 0xc2 <DIO_set_bit_dir+0x32>
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_set_bit_dir+0x28>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_set_bit_dir+0x24>
  bc:	82 2b       	or	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_set_bit_dir+0x3e>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_set_bit_dir+0x3a>
  d2:	80 95       	com	r24
  d4:	82 23       	and	r24, r18
  d6:	8a bb       	out	0x1a, r24	; 26
  d8:	08 95       	ret
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	59 f4       	brne	.+22     	; 0xf4 <DIO_set_bit_dir+0x64>
  de:	27 b3       	in	r18, 0x17	; 23
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_set_bit_dir+0x5a>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_set_bit_dir+0x56>
  ee:	82 2b       	or	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
  f4:	27 b3       	in	r18, 0x17	; 23
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_set_bit_dir+0x70>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_set_bit_dir+0x6c>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	87 bb       	out	0x17, r24	; 23
 10a:	08 95       	ret
 10c:	41 30       	cpi	r20, 0x01	; 1
 10e:	59 f4       	brne	.+22     	; 0x126 <DIO_set_bit_dir+0x96>
 110:	24 b3       	in	r18, 0x14	; 20
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_set_bit_dir+0x8c>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_set_bit_dir+0x88>
 120:	82 2b       	or	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
 126:	24 b3       	in	r18, 0x14	; 20
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_set_bit_dir+0xa2>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_set_bit_dir+0x9e>
 136:	80 95       	com	r24
 138:	82 23       	and	r24, r18
 13a:	84 bb       	out	0x14, r24	; 20
 13c:	08 95       	ret
 13e:	41 30       	cpi	r20, 0x01	; 1
 140:	59 f4       	brne	.+22     	; 0x158 <DIO_set_bit_dir+0xc8>
 142:	21 b3       	in	r18, 0x11	; 17
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_set_bit_dir+0xbe>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_set_bit_dir+0xba>
 152:	82 2b       	or	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret
 158:	21 b3       	in	r18, 0x11	; 17
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_set_bit_dir+0xd4>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_set_bit_dir+0xd0>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	08 95       	ret

00000170 <DIO_read_bit>:
 170:	82 34       	cpi	r24, 0x42	; 66
 172:	f9 f0       	breq	.+62     	; 0x1b2 <DIO_read_bit+0x42>
 174:	18 f4       	brcc	.+6      	; 0x17c <DIO_read_bit+0xc>
 176:	81 34       	cpi	r24, 0x41	; 65
 178:	39 f0       	breq	.+14     	; 0x188 <DIO_read_bit+0x18>
 17a:	59 c0       	rjmp	.+178    	; 0x22e <DIO_read_bit+0xbe>
 17c:	83 34       	cpi	r24, 0x43	; 67
 17e:	71 f1       	breq	.+92     	; 0x1dc <DIO_read_bit+0x6c>
 180:	84 34       	cpi	r24, 0x44	; 68
 182:	09 f4       	brne	.+2      	; 0x186 <DIO_read_bit+0x16>
 184:	40 c0       	rjmp	.+128    	; 0x206 <DIO_read_bit+0x96>
 186:	53 c0       	rjmp	.+166    	; 0x22e <DIO_read_bit+0xbe>
 188:	49 b3       	in	r20, 0x19	; 25
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	9c 01       	movw	r18, r24
 190:	06 2e       	mov	r0, r22
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_read_bit+0x28>
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_read_bit+0x24>
 19c:	84 2f       	mov	r24, r20
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	82 23       	and	r24, r18
 1a2:	93 23       	and	r25, r19
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_read_bit+0x3a>
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_read_bit+0x36>
 1ae:	98 2f       	mov	r25, r24
 1b0:	3e c0       	rjmp	.+124    	; 0x22e <DIO_read_bit+0xbe>
 1b2:	46 b3       	in	r20, 0x16	; 22
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	9c 01       	movw	r18, r24
 1ba:	06 2e       	mov	r0, r22
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_read_bit+0x52>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_read_bit+0x4e>
 1c6:	84 2f       	mov	r24, r20
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	82 23       	and	r24, r18
 1cc:	93 23       	and	r25, r19
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_read_bit+0x64>
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_read_bit+0x60>
 1d8:	98 2f       	mov	r25, r24
 1da:	29 c0       	rjmp	.+82     	; 0x22e <DIO_read_bit+0xbe>
 1dc:	43 b3       	in	r20, 0x13	; 19
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	9c 01       	movw	r18, r24
 1e4:	06 2e       	mov	r0, r22
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_read_bit+0x7c>
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_read_bit+0x78>
 1f0:	84 2f       	mov	r24, r20
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	82 23       	and	r24, r18
 1f6:	93 23       	and	r25, r19
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_read_bit+0x8e>
 1fa:	96 95       	lsr	r25
 1fc:	87 95       	ror	r24
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_read_bit+0x8a>
 202:	98 2f       	mov	r25, r24
 204:	14 c0       	rjmp	.+40     	; 0x22e <DIO_read_bit+0xbe>
 206:	40 b3       	in	r20, 0x10	; 16
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	9c 01       	movw	r18, r24
 20e:	06 2e       	mov	r0, r22
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_read_bit+0xa6>
 212:	22 0f       	add	r18, r18
 214:	33 1f       	adc	r19, r19
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_read_bit+0xa2>
 21a:	84 2f       	mov	r24, r20
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	82 23       	and	r24, r18
 220:	93 23       	and	r25, r19
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_read_bit+0xb8>
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_read_bit+0xb4>
 22c:	98 2f       	mov	r25, r24
 22e:	89 2f       	mov	r24, r25
 230:	08 95       	ret

00000232 <DIO_write_low_nibble>:
		break;
	}
}

void DIO_write_low_nibble(unsigned char port,unsigned char value){
	value&=0x0f;
 232:	6f 70       	andi	r22, 0x0F	; 15
	switch(port){
 234:	82 34       	cpi	r24, 0x42	; 66
 236:	81 f0       	breq	.+32     	; 0x258 <DIO_write_low_nibble+0x26>
 238:	18 f4       	brcc	.+6      	; 0x240 <DIO_write_low_nibble+0xe>
 23a:	81 34       	cpi	r24, 0x41	; 65
 23c:	31 f0       	breq	.+12     	; 0x24a <DIO_write_low_nibble+0x18>
 23e:	08 95       	ret
 240:	83 34       	cpi	r24, 0x43	; 67
 242:	89 f0       	breq	.+34     	; 0x266 <DIO_write_low_nibble+0x34>
 244:	84 34       	cpi	r24, 0x44	; 68
 246:	b1 f0       	breq	.+44     	; 0x274 <DIO_write_low_nibble+0x42>
 248:	08 95       	ret
		case'A':
			PORTA&=0xf0;
 24a:	8b b3       	in	r24, 0x1b	; 27
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	8b bb       	out	0x1b, r24	; 27
			PORTA|=value;	
 250:	8b b3       	in	r24, 0x1b	; 27
 252:	68 2b       	or	r22, r24
 254:	6b bb       	out	0x1b, r22	; 27
		break;
 256:	08 95       	ret
		case'B':
			PORTB &=0xf0;
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	80 7f       	andi	r24, 0xF0	; 240
 25c:	88 bb       	out	0x18, r24	; 24
			PORTB |=value;
 25e:	88 b3       	in	r24, 0x18	; 24
 260:	68 2b       	or	r22, r24
 262:	68 bb       	out	0x18, r22	; 24
		break;
 264:	08 95       	ret
		case'C':
			PORTC&=0xf0;
 266:	85 b3       	in	r24, 0x15	; 21
 268:	80 7f       	andi	r24, 0xF0	; 240
 26a:	85 bb       	out	0x15, r24	; 21
			PORTC|=value;
 26c:	85 b3       	in	r24, 0x15	; 21
 26e:	68 2b       	or	r22, r24
 270:	65 bb       	out	0x15, r22	; 21
		break;
 272:	08 95       	ret
		case'D':
			PORTD&=0xf0;
 274:	82 b3       	in	r24, 0x12	; 18
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	82 bb       	out	0x12, r24	; 18
			PORTD|=value;
 27a:	82 b3       	in	r24, 0x12	; 18
 27c:	68 2b       	or	r22, r24
 27e:	62 bb       	out	0x12, r22	; 18
 280:	08 95       	ret

00000282 <main>:
#include "BUTTON.h"

int main(void)
{
    /* Replace with your application code */
	BCD_SEVENSEGMENT_init('C');
 282:	83 e4       	ldi	r24, 0x43	; 67
 284:	0e 94 71 01 	call	0x2e2	; 0x2e2 <BCD_SEVENSEGMENT_init>
	BCD_SEVENSEGMENT_init('D');
 288:	84 e4       	ldi	r24, 0x44	; 68
 28a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <BCD_SEVENSEGMENT_init>
	BUTTON_init('A',0);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	0e 94 41 00 	call	0x82	; 0x82 <BUTTON_init>
	unsigned char btn_value;
	int counter=0,first_7segement=0,second_7segement=0;
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d0 e0       	ldi	r29, 0x00	; 0
    while (1) 
    {
			btn_value=BUTTON_read('A',0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	81 e4       	ldi	r24, 0x41	; 65
 29e:	0e 94 45 00 	call	0x8a	; 0x8a <BUTTON_read>
			if(btn_value == 1){
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	d1 f7       	brne	.-12     	; 0x29a <main+0x18>
				if(counter==100){
 2a6:	c4 36       	cpi	r28, 0x64	; 100
 2a8:	d1 05       	cpc	r29, r1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <main+0x2e>
					counter=0;
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
				}
				first_7segement=counter%10;
 2b0:	ce 01       	movw	r24, r28
 2b2:	6a e0       	ldi	r22, 0x0A	; 10
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	0e 94 88 01 	call	0x310	; 0x310 <__divmodhi4>
 2ba:	16 2f       	mov	r17, r22
				BCD_SEVENSEGMENT_write('C',first_7segement);
 2bc:	68 2f       	mov	r22, r24
 2be:	83 e4       	ldi	r24, 0x43	; 67
 2c0:	0e 94 85 01 	call	0x30a	; 0x30a <BCD_SEVENSEGMENT_write>
				second_7segement=counter/10;
				BCD_SEVENSEGMENT_write('D',second_7segement);
 2c4:	61 2f       	mov	r22, r17
 2c6:	84 e4       	ldi	r24, 0x44	; 68
 2c8:	0e 94 85 01 	call	0x30a	; 0x30a <BCD_SEVENSEGMENT_write>
				counter++;
 2cc:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	2f e7       	ldi	r18, 0x7F	; 127
 2d0:	8a e1       	ldi	r24, 0x1A	; 26
 2d2:	96 e0       	ldi	r25, 0x06	; 6
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x52>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x5c>
 2de:	00 00       	nop
 2e0:	dc cf       	rjmp	.-72     	; 0x29a <main+0x18>

000002e2 <BCD_SEVENSEGMENT_init>:
	unsigned char arr[]={ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
	DIO_write_port(port,arr[number]);

}

void BCD_SEVENSEGMENT_init(unsigned char port ){
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	18 2f       	mov	r17, r24
	for (int i=0;i<4;i++){
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
 2ee:	06 c0       	rjmp	.+12     	; 0x2fc <BCD_SEVENSEGMENT_init+0x1a>
		DIO_set_bit_dir(port,i,1);	
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	6c 2f       	mov	r22, r28
 2f4:	81 2f       	mov	r24, r17
 2f6:	0e 94 48 00 	call	0x90	; 0x90 <DIO_set_bit_dir>
	DIO_write_port(port,arr[number]);

}

void BCD_SEVENSEGMENT_init(unsigned char port ){
	for (int i=0;i<4;i++){
 2fa:	21 96       	adiw	r28, 0x01	; 1
 2fc:	c4 30       	cpi	r28, 0x04	; 4
 2fe:	d1 05       	cpc	r29, r1
 300:	bc f3       	brlt	.-18     	; 0x2f0 <BCD_SEVENSEGMENT_init+0xe>
		DIO_set_bit_dir(port,i,1);	
	}
	
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	08 95       	ret

0000030a <BCD_SEVENSEGMENT_write>:
void BCD_SEVENSEGMENT_write(unsigned char port ,unsigned char number){
	DIO_write_low_nibble(port,number);
 30a:	0e 94 19 01 	call	0x232	; 0x232 <DIO_write_low_nibble>
 30e:	08 95       	ret

00000310 <__divmodhi4>:
 310:	97 fb       	bst	r25, 7
 312:	07 2e       	mov	r0, r23
 314:	16 f4       	brtc	.+4      	; 0x31a <__divmodhi4+0xa>
 316:	00 94       	com	r0
 318:	07 d0       	rcall	.+14     	; 0x328 <__divmodhi4_neg1>
 31a:	77 fd       	sbrc	r23, 7
 31c:	09 d0       	rcall	.+18     	; 0x330 <__divmodhi4_neg2>
 31e:	0e 94 9c 01 	call	0x338	; 0x338 <__udivmodhi4>
 322:	07 fc       	sbrc	r0, 7
 324:	05 d0       	rcall	.+10     	; 0x330 <__divmodhi4_neg2>
 326:	3e f4       	brtc	.+14     	; 0x336 <__divmodhi4_exit>

00000328 <__divmodhi4_neg1>:
 328:	90 95       	com	r25
 32a:	81 95       	neg	r24
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	08 95       	ret

00000330 <__divmodhi4_neg2>:
 330:	70 95       	com	r23
 332:	61 95       	neg	r22
 334:	7f 4f       	sbci	r23, 0xFF	; 255

00000336 <__divmodhi4_exit>:
 336:	08 95       	ret

00000338 <__udivmodhi4>:
 338:	aa 1b       	sub	r26, r26
 33a:	bb 1b       	sub	r27, r27
 33c:	51 e1       	ldi	r21, 0x11	; 17
 33e:	07 c0       	rjmp	.+14     	; 0x34e <__udivmodhi4_ep>

00000340 <__udivmodhi4_loop>:
 340:	aa 1f       	adc	r26, r26
 342:	bb 1f       	adc	r27, r27
 344:	a6 17       	cp	r26, r22
 346:	b7 07       	cpc	r27, r23
 348:	10 f0       	brcs	.+4      	; 0x34e <__udivmodhi4_ep>
 34a:	a6 1b       	sub	r26, r22
 34c:	b7 0b       	sbc	r27, r23

0000034e <__udivmodhi4_ep>:
 34e:	88 1f       	adc	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	5a 95       	dec	r21
 354:	a9 f7       	brne	.-22     	; 0x340 <__udivmodhi4_loop>
 356:	80 95       	com	r24
 358:	90 95       	com	r25
 35a:	bc 01       	movw	r22, r24
 35c:	cd 01       	movw	r24, r26
 35e:	08 95       	ret

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
