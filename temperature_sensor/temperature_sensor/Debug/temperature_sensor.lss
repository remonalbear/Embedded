
temperature_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000007ae  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001091  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000831  00000000  00000000  00001a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000099d  00000000  00000000  00002266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00002c04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048c  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c28  00000000  00000000  0000324c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003e74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 24 02 	call	0x448	; 0x448 <main>
  7a:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
 *  Author: remon
 */ 
#include <avr/io.h>
#include "macros.h"
void ADC_init(unsigned char pin){
	ADMUX =pin; //choose adc pin
  82:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADMUX,REFS0); // configure VREF
  84:	87 b1       	in	r24, 0x07	; 7
  86:	80 64       	ori	r24, 0x40	; 64
  88:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,REFS1);
  8a:	87 b1       	in	r24, 0x07	; 7
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,ADLAR); // configure data representation
  90:	87 b1       	in	r24, 0x07	; 7
  92:	8f 7d       	andi	r24, 0xDF	; 223
  94:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADEN); //enable adc 
  96:	86 b1       	in	r24, 0x06	; 6
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	86 b9       	out	0x06, r24	; 6
	//adjust clock
	SET_BIT(ADCSRA,ADPS2);
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	86 b9       	out	0x06, r24	; 6
	CLR_BIT(ADCSRA,ADPS0);
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	86 b9       	out	0x06, r24	; 6
  ae:	08 95       	ret

000000b0 <ADC_read>:
}
unsigned short ADC_read(void){
	unsigned short data=0;
	
	SET_BIT(ADCSRA,ADSC);
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	86 b9       	out	0x06, r24	; 6
	while(!READ_BIT(ADCSRA,ADIF));
  b6:	34 9b       	sbis	0x06, 4	; 6
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <ADC_read+0x6>
	SET_BIT(ADCSRA,ADIF);
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	86 b9       	out	0x06, r24	; 6
	data=ADCL;
  c0:	24 b1       	in	r18, 0x04	; 4
	data |= (ADCH<<8);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	98 2f       	mov	r25, r24
  c8:	88 27       	eor	r24, r24
	return data;
  ca:	82 2b       	or	r24, r18
  cc:	08 95       	ret

000000ce <DIO_set_bit_dir>:
			break;
			case 'C':
				TOG_BIT(PORTC,bit);
			break;
			case 'D':
				TOG_BIT(PORTD,bit);
  ce:	82 34       	cpi	r24, 0x42	; 66
  d0:	19 f1       	breq	.+70     	; 0x118 <DIO_set_bit_dir+0x4a>
  d2:	18 f4       	brcc	.+6      	; 0xda <DIO_set_bit_dir+0xc>
  d4:	81 34       	cpi	r24, 0x41	; 65
  d6:	39 f0       	breq	.+14     	; 0xe6 <DIO_set_bit_dir+0x18>
  d8:	08 95       	ret
  da:	83 34       	cpi	r24, 0x43	; 67
  dc:	b1 f1       	breq	.+108    	; 0x14a <DIO_set_bit_dir+0x7c>
  de:	84 34       	cpi	r24, 0x44	; 68
  e0:	09 f4       	brne	.+2      	; 0xe4 <DIO_set_bit_dir+0x16>
  e2:	4c c0       	rjmp	.+152    	; 0x17c <DIO_set_bit_dir+0xae>
  e4:	08 95       	ret
  e6:	41 30       	cpi	r20, 0x01	; 1
  e8:	59 f4       	brne	.+22     	; 0x100 <DIO_set_bit_dir+0x32>
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_set_bit_dir+0x28>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_set_bit_dir+0x24>
  fa:	82 2b       	or	r24, r18
  fc:	8a bb       	out	0x1a, r24	; 26
  fe:	08 95       	ret
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_set_bit_dir+0x3e>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_set_bit_dir+0x3a>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	8a bb       	out	0x1a, r24	; 26
 116:	08 95       	ret
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	59 f4       	brne	.+22     	; 0x132 <DIO_set_bit_dir+0x64>
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_set_bit_dir+0x5a>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_set_bit_dir+0x56>
 12c:	82 2b       	or	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_set_bit_dir+0x70>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_set_bit_dir+0x6c>
 142:	80 95       	com	r24
 144:	82 23       	and	r24, r18
 146:	87 bb       	out	0x17, r24	; 23
 148:	08 95       	ret
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	59 f4       	brne	.+22     	; 0x164 <DIO_set_bit_dir+0x96>
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_set_bit_dir+0x8c>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_set_bit_dir+0x88>
 15e:	82 2b       	or	r24, r18
 160:	84 bb       	out	0x14, r24	; 20
 162:	08 95       	ret
 164:	24 b3       	in	r18, 0x14	; 20
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_set_bit_dir+0xa2>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_set_bit_dir+0x9e>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	84 bb       	out	0x14, r24	; 20
 17a:	08 95       	ret
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	59 f4       	brne	.+22     	; 0x196 <DIO_set_bit_dir+0xc8>
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_set_bit_dir+0xbe>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_set_bit_dir+0xba>
 190:	82 2b       	or	r24, r18
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret
 196:	21 b3       	in	r18, 0x11	; 17
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_set_bit_dir+0xd4>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_set_bit_dir+0xd0>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	81 bb       	out	0x11, r24	; 17
 1ac:	08 95       	ret

000001ae <DIO_write_bit>:
 1ae:	82 34       	cpi	r24, 0x42	; 66
 1b0:	19 f1       	breq	.+70     	; 0x1f8 <DIO_write_bit+0x4a>
 1b2:	18 f4       	brcc	.+6      	; 0x1ba <DIO_write_bit+0xc>
 1b4:	81 34       	cpi	r24, 0x41	; 65
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <DIO_write_bit+0x18>
 1b8:	08 95       	ret
 1ba:	83 34       	cpi	r24, 0x43	; 67
 1bc:	b1 f1       	breq	.+108    	; 0x22a <DIO_write_bit+0x7c>
 1be:	84 34       	cpi	r24, 0x44	; 68
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_write_bit+0x16>
 1c2:	4c c0       	rjmp	.+152    	; 0x25c <DIO_write_bit+0xae>
 1c4:	08 95       	ret
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	59 f4       	brne	.+22     	; 0x1e0 <DIO_write_bit+0x32>
 1ca:	2b b3       	in	r18, 0x1b	; 27
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_write_bit+0x28>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_write_bit+0x24>
 1da:	82 2b       	or	r24, r18
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	08 95       	ret
 1e0:	2b b3       	in	r18, 0x1b	; 27
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_write_bit+0x3e>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_write_bit+0x3a>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	8b bb       	out	0x1b, r24	; 27
 1f6:	08 95       	ret
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	59 f4       	brne	.+22     	; 0x212 <DIO_write_bit+0x64>
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_write_bit+0x5a>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_write_bit+0x56>
 20c:	82 2b       	or	r24, r18
 20e:	88 bb       	out	0x18, r24	; 24
 210:	08 95       	ret
 212:	28 b3       	in	r18, 0x18	; 24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_write_bit+0x70>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_write_bit+0x6c>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	59 f4       	brne	.+22     	; 0x244 <DIO_write_bit+0x96>
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_write_bit+0x8c>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_write_bit+0x88>
 23e:	82 2b       	or	r24, r18
 240:	85 bb       	out	0x15, r24	; 21
 242:	08 95       	ret
 244:	25 b3       	in	r18, 0x15	; 21
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_write_bit+0xa2>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_write_bit+0x9e>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	85 bb       	out	0x15, r24	; 21
 25a:	08 95       	ret
 25c:	41 30       	cpi	r20, 0x01	; 1
 25e:	59 f4       	brne	.+22     	; 0x276 <DIO_write_bit+0xc8>
 260:	22 b3       	in	r18, 0x12	; 18
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_write_bit+0xbe>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_write_bit+0xba>
 270:	82 2b       	or	r24, r18
 272:	82 bb       	out	0x12, r24	; 18
 274:	08 95       	ret
 276:	22 b3       	in	r18, 0x12	; 18
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_write_bit+0xd4>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_write_bit+0xd0>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	82 bb       	out	0x12, r24	; 18
 28c:	08 95       	ret

0000028e <DIO_set_port_dir>:
			break;
	}
}
void DIO_set_port_dir(unsigned char port , unsigned char dir){
	switch(port){
 28e:	82 34       	cpi	r24, 0x42	; 66
 290:	81 f0       	breq	.+32     	; 0x2b2 <DIO_set_port_dir+0x24>
 292:	18 f4       	brcc	.+6      	; 0x29a <DIO_set_port_dir+0xc>
 294:	81 34       	cpi	r24, 0x41	; 65
 296:	31 f0       	breq	.+12     	; 0x2a4 <DIO_set_port_dir+0x16>
 298:	08 95       	ret
 29a:	83 34       	cpi	r24, 0x43	; 67
 29c:	89 f0       	breq	.+34     	; 0x2c0 <DIO_set_port_dir+0x32>
 29e:	84 34       	cpi	r24, 0x44	; 68
 2a0:	b1 f0       	breq	.+44     	; 0x2ce <DIO_set_port_dir+0x40>
 2a2:	08 95       	ret
		case 'A':
		if (dir==1){
 2a4:	61 30       	cpi	r22, 0x01	; 1
 2a6:	19 f4       	brne	.+6      	; 0x2ae <DIO_set_port_dir+0x20>
			DDRA=0xff;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	8a bb       	out	0x1a, r24	; 26
 2ac:	08 95       	ret
		}
		else{
			DDRA=0x00;
 2ae:	1a ba       	out	0x1a, r1	; 26
 2b0:	08 95       	ret
		}
		break;
		case 'B':
		if (dir==1){
 2b2:	61 30       	cpi	r22, 0x01	; 1
 2b4:	19 f4       	brne	.+6      	; 0x2bc <DIO_set_port_dir+0x2e>
			DDRB=0xff;
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	87 bb       	out	0x17, r24	; 23
 2ba:	08 95       	ret
		}
		else{
			DDRB=0x00;
 2bc:	17 ba       	out	0x17, r1	; 23
 2be:	08 95       	ret
		}
		break;
		case 'C':
		if (dir==1){
 2c0:	61 30       	cpi	r22, 0x01	; 1
 2c2:	19 f4       	brne	.+6      	; 0x2ca <DIO_set_port_dir+0x3c>
			DDRC=0xff;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	84 bb       	out	0x14, r24	; 20
 2c8:	08 95       	ret
		}
		else{
			DDRC=0x00;
 2ca:	14 ba       	out	0x14, r1	; 20
 2cc:	08 95       	ret
		}
		break;
		case 'D':
		if (dir==1){
 2ce:	61 30       	cpi	r22, 0x01	; 1
 2d0:	19 f4       	brne	.+6      	; 0x2d8 <DIO_set_port_dir+0x4a>
			DDRD=0xff;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	81 bb       	out	0x11, r24	; 17
 2d6:	08 95       	ret
		}
		else{
			DDRD=0x00;
 2d8:	11 ba       	out	0x11, r1	; 17
 2da:	08 95       	ret

000002dc <DIO_write_port>:
		}
		break;
	}
}
void DIO_write_port(unsigned char port, unsigned char value){
	switch(port){
 2dc:	82 34       	cpi	r24, 0x42	; 66
 2de:	59 f0       	breq	.+22     	; 0x2f6 <DIO_write_port+0x1a>
 2e0:	18 f4       	brcc	.+6      	; 0x2e8 <DIO_write_port+0xc>
 2e2:	81 34       	cpi	r24, 0x41	; 65
 2e4:	31 f0       	breq	.+12     	; 0x2f2 <DIO_write_port+0x16>
 2e6:	08 95       	ret
 2e8:	83 34       	cpi	r24, 0x43	; 67
 2ea:	39 f0       	breq	.+14     	; 0x2fa <DIO_write_port+0x1e>
 2ec:	84 34       	cpi	r24, 0x44	; 68
 2ee:	39 f0       	breq	.+14     	; 0x2fe <DIO_write_port+0x22>
 2f0:	08 95       	ret
		case 'A':
			PORTA=value;
 2f2:	6b bb       	out	0x1b, r22	; 27
			break;
 2f4:	08 95       	ret
		case 'B':
			PORTB=value;
 2f6:	68 bb       	out	0x18, r22	; 24
			break;
 2f8:	08 95       	ret
		case 'C':
			PORTC=value;
 2fa:	65 bb       	out	0x15, r22	; 21
			break;
 2fc:	08 95       	ret
		case 'D':
			PORTD=value;
 2fe:	62 bb       	out	0x12, r22	; 18
 300:	08 95       	ret

00000302 <LCD_send_falling_edge>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	82 e4       	ldi	r24, 0x42	; 66
 308:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_write_bit>
 30c:	8f e9       	ldi	r24, 0x9F	; 159
 30e:	9f e0       	ldi	r25, 0x0F	; 15
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <LCD_send_falling_edge+0xe>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_send_falling_edge+0x14>
 316:	00 00       	nop
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	82 e4       	ldi	r24, 0x42	; 66
 31e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_write_bit>
 322:	8f e9       	ldi	r24, 0x9F	; 159
 324:	9f e0       	ldi	r25, 0x0F	; 15
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <LCD_send_falling_edge+0x24>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <LCD_send_falling_edge+0x2a>
 32c:	00 00       	nop
 32e:	08 95       	ret

00000330 <LCD_send_cmd>:
 330:	68 2f       	mov	r22, r24
 332:	83 e4       	ldi	r24, 0x43	; 67
 334:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write_port>
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	82 e4       	ldi	r24, 0x42	; 66
 33e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_write_bit>
 342:	0e 94 81 01 	call	0x302	; 0x302 <LCD_send_falling_edge>
 346:	08 95       	ret

00000348 <LCD_init>:
 348:	2f ef       	ldi	r18, 0xFF	; 255
 34a:	81 ee       	ldi	r24, 0xE1	; 225
 34c:	94 e0       	ldi	r25, 0x04	; 4
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <LCD_init+0x6>
 356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_init+0x10>
 358:	00 00       	nop
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	83 e4       	ldi	r24, 0x43	; 67
 35e:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_set_port_dir>
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	82 e4       	ldi	r24, 0x42	; 66
 368:	0e 94 67 00 	call	0xce	; 0xce <DIO_set_bit_dir>
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	82 e4       	ldi	r24, 0x42	; 66
 372:	0e 94 67 00 	call	0xce	; 0xce <DIO_set_bit_dir>
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	82 e4       	ldi	r24, 0x42	; 66
 37c:	0e 94 67 00 	call	0xce	; 0xce <DIO_set_bit_dir>
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	82 e4       	ldi	r24, 0x42	; 66
 386:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_write_bit>
 38a:	88 e3       	ldi	r24, 0x38	; 56
 38c:	0e 94 98 01 	call	0x330	; 0x330 <LCD_send_cmd>
 390:	8f ec       	ldi	r24, 0xCF	; 207
 392:	97 e0       	ldi	r25, 0x07	; 7
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_init+0x4c>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_init+0x52>
 39a:	00 00       	nop
 39c:	8e e0       	ldi	r24, 0x0E	; 14
 39e:	0e 94 98 01 	call	0x330	; 0x330 <LCD_send_cmd>
 3a2:	8f ec       	ldi	r24, 0xCF	; 207
 3a4:	97 e0       	ldi	r25, 0x07	; 7
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <LCD_init+0x5e>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <LCD_init+0x64>
 3ac:	00 00       	nop
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 98 01 	call	0x330	; 0x330 <LCD_send_cmd>
 3b4:	8f e1       	ldi	r24, 0x1F	; 31
 3b6:	9e e4       	ldi	r25, 0x4E	; 78
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <LCD_init+0x70>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <LCD_init+0x76>
 3be:	00 00       	nop
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	0e 94 98 01 	call	0x330	; 0x330 <LCD_send_cmd>
 3c6:	8f ec       	ldi	r24, 0xCF	; 207
 3c8:	97 e0       	ldi	r25, 0x07	; 7
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_init+0x82>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_init+0x88>
 3d0:	00 00       	nop
 3d2:	08 95       	ret

000003d4 <LCD_send_char>:
 3d4:	68 2f       	mov	r22, r24
 3d6:	83 e4       	ldi	r24, 0x43	; 67
 3d8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write_port>
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	82 e4       	ldi	r24, 0x42	; 66
 3e2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_write_bit>
 3e6:	0e 94 81 01 	call	0x302	; 0x302 <LCD_send_falling_edge>
 3ea:	08 95       	ret

000003ec <LCD_send_string>:
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	ec 01       	movw	r28, r24
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <LCD_send_string+0xe>
 3f4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_send_char>
 3f8:	21 96       	adiw	r28, 0x01	; 1
 3fa:	88 81       	ld	r24, Y
 3fc:	81 11       	cpse	r24, r1
 3fe:	fa cf       	rjmp	.-12     	; 0x3f4 <LCD_send_string+0x8>
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <LCD_move_cursor>:
	LCD_send_cmd(CLR_SCREEN);
	_delay_ms(10);
}
void LCD_move_cursor(char row,char col){
		char data ;
		if(row>2||row<1||col>16||col<1)
 406:	9f ef       	ldi	r25, 0xFF	; 255
 408:	98 0f       	add	r25, r24
 40a:	92 30       	cpi	r25, 0x02	; 2
 40c:	70 f4       	brcc	.+28     	; 0x42a <LCD_move_cursor+0x24>
 40e:	61 31       	cpi	r22, 0x11	; 17
 410:	70 f4       	brcc	.+28     	; 0x42e <LCD_move_cursor+0x28>
 412:	66 23       	and	r22, r22
 414:	71 f0       	breq	.+28     	; 0x432 <LCD_move_cursor+0x2c>
		{
			data=0x80;
		}
		else if(row==1)
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	19 f4       	brne	.+6      	; 0x420 <LCD_move_cursor+0x1a>
		{
			data=0x80+col-1 ;
 41a:	2f e7       	ldi	r18, 0x7F	; 127
 41c:	26 0f       	add	r18, r22
 41e:	0a c0       	rjmp	.+20     	; 0x434 <LCD_move_cursor+0x2e>
		}
		else if (row==2)
 420:	82 30       	cpi	r24, 0x02	; 2
 422:	41 f4       	brne	.+16     	; 0x434 <LCD_move_cursor+0x2e>
		{
			data=0xc0+col-1;
 424:	2f eb       	ldi	r18, 0xBF	; 191
 426:	26 0f       	add	r18, r22
 428:	05 c0       	rjmp	.+10     	; 0x434 <LCD_move_cursor+0x2e>
}
void LCD_move_cursor(char row,char col){
		char data ;
		if(row>2||row<1||col>16||col<1)
		{
			data=0x80;
 42a:	20 e8       	ldi	r18, 0x80	; 128
 42c:	03 c0       	rjmp	.+6      	; 0x434 <LCD_move_cursor+0x2e>
 42e:	20 e8       	ldi	r18, 0x80	; 128
 430:	01 c0       	rjmp	.+2      	; 0x434 <LCD_move_cursor+0x2e>
 432:	20 e8       	ldi	r18, 0x80	; 128
		}
		else if (row==2)
		{
			data=0xc0+col-1;
		}
		LCD_send_cmd(data);
 434:	82 2f       	mov	r24, r18
 436:	0e 94 98 01 	call	0x330	; 0x330 <LCD_send_cmd>
 43a:	8f ec       	ldi	r24, 0xCF	; 207
 43c:	97 e0       	ldi	r25, 0x07	; 7
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <LCD_move_cursor+0x38>
 442:	00 c0       	rjmp	.+0      	; 0x444 <LCD_move_cursor+0x3e>
 444:	00 00       	nop
 446:	08 95       	ret

00000448 <main>:
#include "LCD.h"

int main(void)
{
    /* Replace with your application code */
	LCD_init();
 448:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_init>
	ADC_init(0);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	unsigned short data=0;
	LCD_send_string("Temp=");
 452:	80 e6       	ldi	r24, 0x60	; 96
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_send_string>
    while (1) 
    {
		data=(ADC_read() * .5);
 45a:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_read>
 45e:	bc 01       	movw	r22, r24
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 cb 02 	call	0x596	; 0x596 <__floatunsisf>
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	40 e0       	ldi	r20, 0x00	; 0
 46e:	5f e3       	ldi	r21, 0x3F	; 63
 470:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3>
 474:	0e 94 9c 02 	call	0x538	; 0x538 <__fixunssfsi>
 478:	6b 01       	movw	r12, r22
 47a:	7c 01       	movw	r14, r24
		if(data<10)
 47c:	6a 30       	cpi	r22, 0x0A	; 10
 47e:	71 05       	cpc	r23, r1
 480:	58 f5       	brcc	.+86     	; 0x4d8 <main+0x90>
		{
			LCD_move_cursor(1,6);
 482:	66 e0       	ldi	r22, 0x06	; 6
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 03 02 	call	0x406	; 0x406 <LCD_move_cursor>
			LCD_send_char(0x30);
 48a:	80 e3       	ldi	r24, 0x30	; 48
 48c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_send_char>
			LCD_send_char((data%10)+48);
 490:	96 01       	movw	r18, r12
 492:	ad ec       	ldi	r26, 0xCD	; 205
 494:	bc ec       	ldi	r27, 0xCC	; 204
 496:	0e 94 c6 03 	call	0x78c	; 0x78c <__umulhisi3>
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	9c 01       	movw	r18, r24
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	82 0f       	add	r24, r18
 4ba:	93 1f       	adc	r25, r19
 4bc:	96 01       	movw	r18, r12
 4be:	28 1b       	sub	r18, r24
 4c0:	39 0b       	sbc	r19, r25
 4c2:	c9 01       	movw	r24, r18
 4c4:	80 5d       	subi	r24, 0xD0	; 208
 4c6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_send_char>
			LCD_send_char(0xDF);
 4ca:	8f ed       	ldi	r24, 0xDF	; 223
 4cc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_send_char>
			LCD_send_char(0x43);
 4d0:	83 e4       	ldi	r24, 0x43	; 67
 4d2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_send_char>
 4d6:	c1 cf       	rjmp	.-126    	; 0x45a <main+0x12>
		}
		else if( data<100)
 4d8:	64 36       	cpi	r22, 0x64	; 100
 4da:	71 05       	cpc	r23, r1
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <main+0x98>
 4de:	bd cf       	rjmp	.-134    	; 0x45a <main+0x12>
		{
			LCD_move_cursor(1,6);
 4e0:	66 e0       	ldi	r22, 0x06	; 6
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	0e 94 03 02 	call	0x406	; 0x406 <LCD_move_cursor>
			LCD_send_char((data/10)+48);
 4e8:	96 01       	movw	r18, r12
 4ea:	ad ec       	ldi	r26, 0xCD	; 205
 4ec:	bc ec       	ldi	r27, 0xCC	; 204
 4ee:	0e 94 c6 03 	call	0x78c	; 0x78c <__umulhisi3>
 4f2:	ec 01       	movw	r28, r24
 4f4:	d6 95       	lsr	r29
 4f6:	c7 95       	ror	r28
 4f8:	d6 95       	lsr	r29
 4fa:	c7 95       	ror	r28
 4fc:	d6 95       	lsr	r29
 4fe:	c7 95       	ror	r28
 500:	8c 2f       	mov	r24, r28
 502:	80 5d       	subi	r24, 0xD0	; 208
 504:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_send_char>
			LCD_send_char((data%10)+48);
 508:	ce 01       	movw	r24, r28
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	cc 0f       	add	r28, r28
 510:	dd 1f       	adc	r29, r29
 512:	cc 0f       	add	r28, r28
 514:	dd 1f       	adc	r29, r29
 516:	cc 0f       	add	r28, r28
 518:	dd 1f       	adc	r29, r29
 51a:	c8 0f       	add	r28, r24
 51c:	d9 1f       	adc	r29, r25
 51e:	c6 01       	movw	r24, r12
 520:	8c 1b       	sub	r24, r28
 522:	9d 0b       	sbc	r25, r29
 524:	80 5d       	subi	r24, 0xD0	; 208
 526:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_send_char>
			LCD_send_char(0XDF);
 52a:	8f ed       	ldi	r24, 0xDF	; 223
 52c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_send_char>
			LCD_send_char(0X43);
 530:	83 e4       	ldi	r24, 0x43	; 67
 532:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_send_char>
 536:	91 cf       	rjmp	.-222    	; 0x45a <main+0x12>

00000538 <__fixunssfsi>:
 538:	0e 94 10 03 	call	0x620	; 0x620 <__fp_splitA>
 53c:	88 f0       	brcs	.+34     	; 0x560 <__fixunssfsi+0x28>
 53e:	9f 57       	subi	r25, 0x7F	; 127
 540:	98 f0       	brcs	.+38     	; 0x568 <__fixunssfsi+0x30>
 542:	b9 2f       	mov	r27, r25
 544:	99 27       	eor	r25, r25
 546:	b7 51       	subi	r27, 0x17	; 23
 548:	b0 f0       	brcs	.+44     	; 0x576 <__fixunssfsi+0x3e>
 54a:	e1 f0       	breq	.+56     	; 0x584 <__fixunssfsi+0x4c>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	1a f0       	brmi	.+6      	; 0x55c <__fixunssfsi+0x24>
 556:	ba 95       	dec	r27
 558:	c9 f7       	brne	.-14     	; 0x54c <__fixunssfsi+0x14>
 55a:	14 c0       	rjmp	.+40     	; 0x584 <__fixunssfsi+0x4c>
 55c:	b1 30       	cpi	r27, 0x01	; 1
 55e:	91 f0       	breq	.+36     	; 0x584 <__fixunssfsi+0x4c>
 560:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_zero>
 564:	b1 e0       	ldi	r27, 0x01	; 1
 566:	08 95       	ret
 568:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_zero>
 56c:	67 2f       	mov	r22, r23
 56e:	78 2f       	mov	r23, r24
 570:	88 27       	eor	r24, r24
 572:	b8 5f       	subi	r27, 0xF8	; 248
 574:	39 f0       	breq	.+14     	; 0x584 <__fixunssfsi+0x4c>
 576:	b9 3f       	cpi	r27, 0xF9	; 249
 578:	cc f3       	brlt	.-14     	; 0x56c <__fixunssfsi+0x34>
 57a:	86 95       	lsr	r24
 57c:	77 95       	ror	r23
 57e:	67 95       	ror	r22
 580:	b3 95       	inc	r27
 582:	d9 f7       	brne	.-10     	; 0x57a <__fixunssfsi+0x42>
 584:	3e f4       	brtc	.+14     	; 0x594 <__fixunssfsi+0x5c>
 586:	90 95       	com	r25
 588:	80 95       	com	r24
 58a:	70 95       	com	r23
 58c:	61 95       	neg	r22
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	08 95       	ret

00000596 <__floatunsisf>:
 596:	e8 94       	clt
 598:	09 c0       	rjmp	.+18     	; 0x5ac <__floatsisf+0x12>

0000059a <__floatsisf>:
 59a:	97 fb       	bst	r25, 7
 59c:	3e f4       	brtc	.+14     	; 0x5ac <__floatsisf+0x12>
 59e:	90 95       	com	r25
 5a0:	80 95       	com	r24
 5a2:	70 95       	com	r23
 5a4:	61 95       	neg	r22
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	99 23       	and	r25, r25
 5ae:	a9 f0       	breq	.+42     	; 0x5da <__floatsisf+0x40>
 5b0:	f9 2f       	mov	r31, r25
 5b2:	96 e9       	ldi	r25, 0x96	; 150
 5b4:	bb 27       	eor	r27, r27
 5b6:	93 95       	inc	r25
 5b8:	f6 95       	lsr	r31
 5ba:	87 95       	ror	r24
 5bc:	77 95       	ror	r23
 5be:	67 95       	ror	r22
 5c0:	b7 95       	ror	r27
 5c2:	f1 11       	cpse	r31, r1
 5c4:	f8 cf       	rjmp	.-16     	; 0x5b6 <__floatsisf+0x1c>
 5c6:	fa f4       	brpl	.+62     	; 0x606 <__floatsisf+0x6c>
 5c8:	bb 0f       	add	r27, r27
 5ca:	11 f4       	brne	.+4      	; 0x5d0 <__floatsisf+0x36>
 5cc:	60 ff       	sbrs	r22, 0
 5ce:	1b c0       	rjmp	.+54     	; 0x606 <__floatsisf+0x6c>
 5d0:	6f 5f       	subi	r22, 0xFF	; 255
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	16 c0       	rjmp	.+44     	; 0x606 <__floatsisf+0x6c>
 5da:	88 23       	and	r24, r24
 5dc:	11 f0       	breq	.+4      	; 0x5e2 <__floatsisf+0x48>
 5de:	96 e9       	ldi	r25, 0x96	; 150
 5e0:	11 c0       	rjmp	.+34     	; 0x604 <__floatsisf+0x6a>
 5e2:	77 23       	and	r23, r23
 5e4:	21 f0       	breq	.+8      	; 0x5ee <__floatsisf+0x54>
 5e6:	9e e8       	ldi	r25, 0x8E	; 142
 5e8:	87 2f       	mov	r24, r23
 5ea:	76 2f       	mov	r23, r22
 5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <__floatsisf+0x5e>
 5ee:	66 23       	and	r22, r22
 5f0:	71 f0       	breq	.+28     	; 0x60e <__floatsisf+0x74>
 5f2:	96 e8       	ldi	r25, 0x86	; 134
 5f4:	86 2f       	mov	r24, r22
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	2a f0       	brmi	.+10     	; 0x606 <__floatsisf+0x6c>
 5fc:	9a 95       	dec	r25
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	88 1f       	adc	r24, r24
 604:	da f7       	brpl	.-10     	; 0x5fc <__floatsisf+0x62>
 606:	88 0f       	add	r24, r24
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	97 f9       	bld	r25, 7
 60e:	08 95       	ret

00000610 <__fp_split3>:
 610:	57 fd       	sbrc	r21, 7
 612:	90 58       	subi	r25, 0x80	; 128
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	59 f0       	breq	.+22     	; 0x630 <__fp_splitA+0x10>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	71 f0       	breq	.+28     	; 0x63a <__fp_splitA+0x1a>
 61e:	47 95       	ror	r20

00000620 <__fp_splitA>:
 620:	88 0f       	add	r24, r24
 622:	97 fb       	bst	r25, 7
 624:	99 1f       	adc	r25, r25
 626:	61 f0       	breq	.+24     	; 0x640 <__fp_splitA+0x20>
 628:	9f 3f       	cpi	r25, 0xFF	; 255
 62a:	79 f0       	breq	.+30     	; 0x64a <__fp_splitA+0x2a>
 62c:	87 95       	ror	r24
 62e:	08 95       	ret
 630:	12 16       	cp	r1, r18
 632:	13 06       	cpc	r1, r19
 634:	14 06       	cpc	r1, r20
 636:	55 1f       	adc	r21, r21
 638:	f2 cf       	rjmp	.-28     	; 0x61e <__fp_split3+0xe>
 63a:	46 95       	lsr	r20
 63c:	f1 df       	rcall	.-30     	; 0x620 <__fp_splitA>
 63e:	08 c0       	rjmp	.+16     	; 0x650 <__fp_splitA+0x30>
 640:	16 16       	cp	r1, r22
 642:	17 06       	cpc	r1, r23
 644:	18 06       	cpc	r1, r24
 646:	99 1f       	adc	r25, r25
 648:	f1 cf       	rjmp	.-30     	; 0x62c <__fp_splitA+0xc>
 64a:	86 95       	lsr	r24
 64c:	71 05       	cpc	r23, r1
 64e:	61 05       	cpc	r22, r1
 650:	08 94       	sec
 652:	08 95       	ret

00000654 <__fp_zero>:
 654:	e8 94       	clt

00000656 <__fp_szero>:
 656:	bb 27       	eor	r27, r27
 658:	66 27       	eor	r22, r22
 65a:	77 27       	eor	r23, r23
 65c:	cb 01       	movw	r24, r22
 65e:	97 f9       	bld	r25, 7
 660:	08 95       	ret

00000662 <__mulsf3>:
 662:	0e 94 44 03 	call	0x688	; 0x688 <__mulsf3x>
 666:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_round>
 66a:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_pscA>
 66e:	38 f0       	brcs	.+14     	; 0x67e <__mulsf3+0x1c>
 670:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_pscB>
 674:	20 f0       	brcs	.+8      	; 0x67e <__mulsf3+0x1c>
 676:	95 23       	and	r25, r21
 678:	11 f0       	breq	.+4      	; 0x67e <__mulsf3+0x1c>
 67a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_inf>
 67e:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_nan>
 682:	11 24       	eor	r1, r1
 684:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_szero>

00000688 <__mulsf3x>:
 688:	0e 94 08 03 	call	0x610	; 0x610 <__fp_split3>
 68c:	70 f3       	brcs	.-36     	; 0x66a <__mulsf3+0x8>

0000068e <__mulsf3_pse>:
 68e:	95 9f       	mul	r25, r21
 690:	c1 f3       	breq	.-16     	; 0x682 <__mulsf3+0x20>
 692:	95 0f       	add	r25, r21
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	55 1f       	adc	r21, r21
 698:	62 9f       	mul	r22, r18
 69a:	f0 01       	movw	r30, r0
 69c:	72 9f       	mul	r23, r18
 69e:	bb 27       	eor	r27, r27
 6a0:	f0 0d       	add	r31, r0
 6a2:	b1 1d       	adc	r27, r1
 6a4:	63 9f       	mul	r22, r19
 6a6:	aa 27       	eor	r26, r26
 6a8:	f0 0d       	add	r31, r0
 6aa:	b1 1d       	adc	r27, r1
 6ac:	aa 1f       	adc	r26, r26
 6ae:	64 9f       	mul	r22, r20
 6b0:	66 27       	eor	r22, r22
 6b2:	b0 0d       	add	r27, r0
 6b4:	a1 1d       	adc	r26, r1
 6b6:	66 1f       	adc	r22, r22
 6b8:	82 9f       	mul	r24, r18
 6ba:	22 27       	eor	r18, r18
 6bc:	b0 0d       	add	r27, r0
 6be:	a1 1d       	adc	r26, r1
 6c0:	62 1f       	adc	r22, r18
 6c2:	73 9f       	mul	r23, r19
 6c4:	b0 0d       	add	r27, r0
 6c6:	a1 1d       	adc	r26, r1
 6c8:	62 1f       	adc	r22, r18
 6ca:	83 9f       	mul	r24, r19
 6cc:	a0 0d       	add	r26, r0
 6ce:	61 1d       	adc	r22, r1
 6d0:	22 1f       	adc	r18, r18
 6d2:	74 9f       	mul	r23, r20
 6d4:	33 27       	eor	r19, r19
 6d6:	a0 0d       	add	r26, r0
 6d8:	61 1d       	adc	r22, r1
 6da:	23 1f       	adc	r18, r19
 6dc:	84 9f       	mul	r24, r20
 6de:	60 0d       	add	r22, r0
 6e0:	21 1d       	adc	r18, r1
 6e2:	82 2f       	mov	r24, r18
 6e4:	76 2f       	mov	r23, r22
 6e6:	6a 2f       	mov	r22, r26
 6e8:	11 24       	eor	r1, r1
 6ea:	9f 57       	subi	r25, 0x7F	; 127
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	9a f0       	brmi	.+38     	; 0x716 <__mulsf3_pse+0x88>
 6f0:	f1 f0       	breq	.+60     	; 0x72e <__mulsf3_pse+0xa0>
 6f2:	88 23       	and	r24, r24
 6f4:	4a f0       	brmi	.+18     	; 0x708 <__mulsf3_pse+0x7a>
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	bb 1f       	adc	r27, r27
 6fc:	66 1f       	adc	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	91 50       	subi	r25, 0x01	; 1
 704:	50 40       	sbci	r21, 0x00	; 0
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__mulsf3_pse+0x64>
 708:	9e 3f       	cpi	r25, 0xFE	; 254
 70a:	51 05       	cpc	r21, r1
 70c:	80 f0       	brcs	.+32     	; 0x72e <__mulsf3_pse+0xa0>
 70e:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_inf>
 712:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_szero>
 716:	5f 3f       	cpi	r21, 0xFF	; 255
 718:	e4 f3       	brlt	.-8      	; 0x712 <__mulsf3_pse+0x84>
 71a:	98 3e       	cpi	r25, 0xE8	; 232
 71c:	d4 f3       	brlt	.-12     	; 0x712 <__mulsf3_pse+0x84>
 71e:	86 95       	lsr	r24
 720:	77 95       	ror	r23
 722:	67 95       	ror	r22
 724:	b7 95       	ror	r27
 726:	f7 95       	ror	r31
 728:	e7 95       	ror	r30
 72a:	9f 5f       	subi	r25, 0xFF	; 255
 72c:	c1 f7       	brne	.-16     	; 0x71e <__mulsf3_pse+0x90>
 72e:	fe 2b       	or	r31, r30
 730:	88 0f       	add	r24, r24
 732:	91 1d       	adc	r25, r1
 734:	96 95       	lsr	r25
 736:	87 95       	ror	r24
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__fp_inf>:
 73c:	97 f9       	bld	r25, 7
 73e:	9f 67       	ori	r25, 0x7F	; 127
 740:	80 e8       	ldi	r24, 0x80	; 128
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	08 95       	ret

00000748 <__fp_nan>:
 748:	9f ef       	ldi	r25, 0xFF	; 255
 74a:	80 ec       	ldi	r24, 0xC0	; 192
 74c:	08 95       	ret

0000074e <__fp_pscA>:
 74e:	00 24       	eor	r0, r0
 750:	0a 94       	dec	r0
 752:	16 16       	cp	r1, r22
 754:	17 06       	cpc	r1, r23
 756:	18 06       	cpc	r1, r24
 758:	09 06       	cpc	r0, r25
 75a:	08 95       	ret

0000075c <__fp_pscB>:
 75c:	00 24       	eor	r0, r0
 75e:	0a 94       	dec	r0
 760:	12 16       	cp	r1, r18
 762:	13 06       	cpc	r1, r19
 764:	14 06       	cpc	r1, r20
 766:	05 06       	cpc	r0, r21
 768:	08 95       	ret

0000076a <__fp_round>:
 76a:	09 2e       	mov	r0, r25
 76c:	03 94       	inc	r0
 76e:	00 0c       	add	r0, r0
 770:	11 f4       	brne	.+4      	; 0x776 <__fp_round+0xc>
 772:	88 23       	and	r24, r24
 774:	52 f0       	brmi	.+20     	; 0x78a <__fp_round+0x20>
 776:	bb 0f       	add	r27, r27
 778:	40 f4       	brcc	.+16     	; 0x78a <__fp_round+0x20>
 77a:	bf 2b       	or	r27, r31
 77c:	11 f4       	brne	.+4      	; 0x782 <__fp_round+0x18>
 77e:	60 ff       	sbrs	r22, 0
 780:	04 c0       	rjmp	.+8      	; 0x78a <__fp_round+0x20>
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	08 95       	ret

0000078c <__umulhisi3>:
 78c:	a2 9f       	mul	r26, r18
 78e:	b0 01       	movw	r22, r0
 790:	b3 9f       	mul	r27, r19
 792:	c0 01       	movw	r24, r0
 794:	a3 9f       	mul	r26, r19
 796:	70 0d       	add	r23, r0
 798:	81 1d       	adc	r24, r1
 79a:	11 24       	eor	r1, r1
 79c:	91 1d       	adc	r25, r1
 79e:	b2 9f       	mul	r27, r18
 7a0:	70 0d       	add	r23, r0
 7a2:	81 1d       	adc	r24, r1
 7a4:	11 24       	eor	r1, r1
 7a6:	91 1d       	adc	r25, r1
 7a8:	08 95       	ret

000007aa <_exit>:
 7aa:	f8 94       	cli

000007ac <__stop_program>:
 7ac:	ff cf       	rjmp	.-2      	; 0x7ac <__stop_program>
