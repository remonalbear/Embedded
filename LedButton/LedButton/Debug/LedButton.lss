
LedButton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cdc  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c3  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d7  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c2  00000000  00000000  00002607  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002cc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8a 01 	call	0x314	; 0x314 <main>
  64:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BUTTON_init>:
 *  Author: remon
 */ 
#include "DIO.h"

void BUTTON_init(unsigned char port , unsigned char pin){
	DIO_set_bit_dir(port,pin,0);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	0e 94 3d 00 	call	0x7a	; 0x7a <DIO_set_bit_dir>
  72:	08 95       	ret

00000074 <BUTTON_read>:
}
unsigned char BUTTON_read(unsigned char port , unsigned char pin){
	unsigned char value;
	value=DIO_read_bit(port,pin);
  74:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_read_bit>
	return value;
  78:	08 95       	ret

0000007a <DIO_set_bit_dir>:
#include <avr/io.h>
#include "DIO.h"
#include "macros.h"

void DIO_set_bit_dir(unsigned char port,unsigned char bit , unsigned char dir){
	switch(port){
  7a:	82 34       	cpi	r24, 0x42	; 66
  7c:	19 f1       	breq	.+70     	; 0xc4 <DIO_set_bit_dir+0x4a>
  7e:	18 f4       	brcc	.+6      	; 0x86 <DIO_set_bit_dir+0xc>
  80:	81 34       	cpi	r24, 0x41	; 65
  82:	39 f0       	breq	.+14     	; 0x92 <DIO_set_bit_dir+0x18>
  84:	08 95       	ret
  86:	83 34       	cpi	r24, 0x43	; 67
  88:	b1 f1       	breq	.+108    	; 0xf6 <DIO_set_bit_dir+0x7c>
  8a:	84 34       	cpi	r24, 0x44	; 68
  8c:	09 f4       	brne	.+2      	; 0x90 <DIO_set_bit_dir+0x16>
  8e:	4c c0       	rjmp	.+152    	; 0x128 <DIO_set_bit_dir+0xae>
  90:	08 95       	ret
		case 'A':
			if (dir==1){
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	59 f4       	brne	.+22     	; 0xac <DIO_set_bit_dir+0x32>
				SET_BIT(DDRA,bit);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_set_bit_dir+0x28>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_set_bit_dir+0x24>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
			}
			else{
				CLR_BIT(DDRA,bit);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_set_bit_dir+0x3e>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_set_bit_dir+0x3a>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
			}
			break;
		case 'B':
			if (dir==1){
  c4:	41 30       	cpi	r20, 0x01	; 1
  c6:	59 f4       	brne	.+22     	; 0xde <DIO_set_bit_dir+0x64>
				SET_BIT(DDRB,bit);
  c8:	27 b3       	in	r18, 0x17	; 23
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_set_bit_dir+0x5a>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_set_bit_dir+0x56>
  d8:	82 2b       	or	r24, r18
  da:	87 bb       	out	0x17, r24	; 23
  dc:	08 95       	ret
			}
			else{
				CLR_BIT(DDRB,bit);
  de:	27 b3       	in	r18, 0x17	; 23
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_set_bit_dir+0x70>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_set_bit_dir+0x6c>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
			}
			break;
		case 'C':
			if (dir==1){
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	59 f4       	brne	.+22     	; 0x110 <DIO_set_bit_dir+0x96>
				SET_BIT(DDRC,bit);
  fa:	24 b3       	in	r18, 0x14	; 20
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_set_bit_dir+0x8c>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_set_bit_dir+0x88>
 10a:	82 2b       	or	r24, r18
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	08 95       	ret
			}
			else{
				CLR_BIT(DDRC,bit);
 110:	24 b3       	in	r18, 0x14	; 20
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_set_bit_dir+0xa2>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_set_bit_dir+0x9e>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
			}
			break;
		case 'D':
			if (dir==1){
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	59 f4       	brne	.+22     	; 0x142 <DIO_set_bit_dir+0xc8>
				SET_BIT(DDRD,bit);
 12c:	21 b3       	in	r18, 0x11	; 17
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_set_bit_dir+0xbe>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_set_bit_dir+0xba>
 13c:	82 2b       	or	r24, r18
 13e:	81 bb       	out	0x11, r24	; 17
 140:	08 95       	ret
			}
			else{
				CLR_BIT(DDRD,bit);
 142:	21 b3       	in	r18, 0x11	; 17
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_set_bit_dir+0xd4>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_set_bit_dir+0xd0>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret

0000015a <DIO_read_bit>:
			break;
	}
}
unsigned char DIO_read_bit(unsigned char port,unsigned char bit){
	unsigned char value;
	switch(port){
 15a:	82 34       	cpi	r24, 0x42	; 66
 15c:	f9 f0       	breq	.+62     	; 0x19c <DIO_read_bit+0x42>
 15e:	18 f4       	brcc	.+6      	; 0x166 <DIO_read_bit+0xc>
 160:	81 34       	cpi	r24, 0x41	; 65
 162:	39 f0       	breq	.+14     	; 0x172 <DIO_read_bit+0x18>
 164:	59 c0       	rjmp	.+178    	; 0x218 <DIO_read_bit+0xbe>
 166:	83 34       	cpi	r24, 0x43	; 67
 168:	71 f1       	breq	.+92     	; 0x1c6 <DIO_read_bit+0x6c>
 16a:	84 34       	cpi	r24, 0x44	; 68
 16c:	09 f4       	brne	.+2      	; 0x170 <DIO_read_bit+0x16>
 16e:	40 c0       	rjmp	.+128    	; 0x1f0 <DIO_read_bit+0x96>
 170:	53 c0       	rjmp	.+166    	; 0x218 <DIO_read_bit+0xbe>
		case 'A':
			value=READ_BIT(PINA,bit);
 172:	49 b3       	in	r20, 0x19	; 25
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9c 01       	movw	r18, r24
 17a:	06 2e       	mov	r0, r22
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_read_bit+0x28>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_read_bit+0x24>
 186:	84 2f       	mov	r24, r20
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	82 23       	and	r24, r18
 18c:	93 23       	and	r25, r19
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_read_bit+0x3a>
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_read_bit+0x36>
 198:	98 2f       	mov	r25, r24
		break;
 19a:	3e c0       	rjmp	.+124    	; 0x218 <DIO_read_bit+0xbe>
		case 'B':
			value=READ_BIT(PINB,bit);
 19c:	46 b3       	in	r20, 0x16	; 22
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	9c 01       	movw	r18, r24
 1a4:	06 2e       	mov	r0, r22
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_read_bit+0x52>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_read_bit+0x4e>
 1b0:	84 2f       	mov	r24, r20
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	82 23       	and	r24, r18
 1b6:	93 23       	and	r25, r19
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_read_bit+0x64>
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_read_bit+0x60>
 1c2:	98 2f       	mov	r25, r24
		break;
 1c4:	29 c0       	rjmp	.+82     	; 0x218 <DIO_read_bit+0xbe>
		case 'C':
		value=READ_BIT(PINC,bit);
 1c6:	43 b3       	in	r20, 0x13	; 19
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	9c 01       	movw	r18, r24
 1ce:	06 2e       	mov	r0, r22
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_read_bit+0x7c>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_read_bit+0x78>
 1da:	84 2f       	mov	r24, r20
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	82 23       	and	r24, r18
 1e0:	93 23       	and	r25, r19
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_read_bit+0x8e>
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_read_bit+0x8a>
 1ec:	98 2f       	mov	r25, r24
		break;
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <DIO_read_bit+0xbe>
		case 'D':
		value=READ_BIT(PIND,bit);
 1f0:	40 b3       	in	r20, 0x10	; 16
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	9c 01       	movw	r18, r24
 1f8:	06 2e       	mov	r0, r22
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_read_bit+0xa6>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_read_bit+0xa2>
 204:	84 2f       	mov	r24, r20
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	82 23       	and	r24, r18
 20a:	93 23       	and	r25, r19
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_read_bit+0xb8>
 20e:	96 95       	lsr	r25
 210:	87 95       	ror	r24
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_read_bit+0xb4>
 216:	98 2f       	mov	r25, r24
		break;	
	}
	return value;
}
 218:	89 2f       	mov	r24, r25
 21a:	08 95       	ret

0000021c <DIO_write_bit>:
void DIO_write_bit(unsigned char port,unsigned char bit , unsigned char value){
	switch(port){
 21c:	82 34       	cpi	r24, 0x42	; 66
 21e:	19 f1       	breq	.+70     	; 0x266 <DIO_write_bit+0x4a>
 220:	18 f4       	brcc	.+6      	; 0x228 <DIO_write_bit+0xc>
 222:	81 34       	cpi	r24, 0x41	; 65
 224:	39 f0       	breq	.+14     	; 0x234 <DIO_write_bit+0x18>
 226:	08 95       	ret
 228:	83 34       	cpi	r24, 0x43	; 67
 22a:	b1 f1       	breq	.+108    	; 0x298 <DIO_write_bit+0x7c>
 22c:	84 34       	cpi	r24, 0x44	; 68
 22e:	09 f4       	brne	.+2      	; 0x232 <DIO_write_bit+0x16>
 230:	4c c0       	rjmp	.+152    	; 0x2ca <DIO_write_bit+0xae>
 232:	08 95       	ret
		case 'A':
			if (value==1){
 234:	41 30       	cpi	r20, 0x01	; 1
 236:	59 f4       	brne	.+22     	; 0x24e <DIO_write_bit+0x32>
				SET_BIT(PORTA,bit);
 238:	2b b3       	in	r18, 0x1b	; 27
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_write_bit+0x28>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_write_bit+0x24>
 248:	82 2b       	or	r24, r18
 24a:	8b bb       	out	0x1b, r24	; 27
 24c:	08 95       	ret
			}
			else{
				CLR_BIT(PORTA,bit);
 24e:	2b b3       	in	r18, 0x1b	; 27
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_write_bit+0x3e>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_write_bit+0x3a>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	8b bb       	out	0x1b, r24	; 27
 264:	08 95       	ret
			}
		break;
		case 'B':
			if (value==1){
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	59 f4       	brne	.+22     	; 0x280 <DIO_write_bit+0x64>
				SET_BIT(PORTB,bit);
 26a:	28 b3       	in	r18, 0x18	; 24
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write_bit+0x5a>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write_bit+0x56>
 27a:	82 2b       	or	r24, r18
 27c:	88 bb       	out	0x18, r24	; 24
 27e:	08 95       	ret
			}
			else{
				CLR_BIT(PORTB,bit);
 280:	28 b3       	in	r18, 0x18	; 24
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_write_bit+0x70>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_write_bit+0x6c>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	88 bb       	out	0x18, r24	; 24
 296:	08 95       	ret
			}			
		break;
		case 'C':
			if (value==1){
 298:	41 30       	cpi	r20, 0x01	; 1
 29a:	59 f4       	brne	.+22     	; 0x2b2 <DIO_write_bit+0x96>
				SET_BIT(PORTC,bit);
 29c:	25 b3       	in	r18, 0x15	; 21
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_write_bit+0x8c>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_write_bit+0x88>
 2ac:	82 2b       	or	r24, r18
 2ae:	85 bb       	out	0x15, r24	; 21
 2b0:	08 95       	ret
			}
			else{
				CLR_BIT(PORTC,bit);
 2b2:	25 b3       	in	r18, 0x15	; 21
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_write_bit+0xa2>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_write_bit+0x9e>
 2c2:	80 95       	com	r24
 2c4:	82 23       	and	r24, r18
 2c6:	85 bb       	out	0x15, r24	; 21
 2c8:	08 95       	ret
			}
		break;
		case 'D':
			if (value==1){
 2ca:	41 30       	cpi	r20, 0x01	; 1
 2cc:	59 f4       	brne	.+22     	; 0x2e4 <DIO_write_bit+0xc8>
				SET_BIT(PORTD,bit);
 2ce:	22 b3       	in	r18, 0x12	; 18
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_write_bit+0xbe>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_write_bit+0xba>
 2de:	82 2b       	or	r24, r18
 2e0:	82 bb       	out	0x12, r24	; 18
 2e2:	08 95       	ret
			}
			else{
				CLR_BIT(PORTD,bit);
 2e4:	22 b3       	in	r18, 0x12	; 18
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_write_bit+0xd4>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_write_bit+0xd0>
 2f4:	80 95       	com	r24
 2f6:	82 23       	and	r24, r18
 2f8:	82 bb       	out	0x12, r24	; 18
 2fa:	08 95       	ret

000002fc <LED_init>:
 *  Author: remon
 */
#include "DIO.h" 

void LED_init(unsigned char port , unsigned char pin){
	DIO_set_bit_dir(port,pin,1);
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	0e 94 3d 00 	call	0x7a	; 0x7a <DIO_set_bit_dir>
 302:	08 95       	ret

00000304 <LED_on>:
}
void LED_on(unsigned char port , unsigned char pin){
	DIO_write_bit(port,pin,1);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_write_bit>
 30a:	08 95       	ret

0000030c <LED_off>:
}
void LED_off(unsigned char port , unsigned char pin){
	DIO_write_bit(port,pin,0);
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_write_bit>
 312:	08 95       	ret

00000314 <main>:
#include "BUTTON.h"
#include <util/delay.h>
int main(void)
{
    /* Replace with your application code */
	for (int i=0;i<8;i++){
 314:	c0 e0       	ldi	r28, 0x00	; 0
 316:	d0 e0       	ldi	r29, 0x00	; 0
 318:	05 c0       	rjmp	.+10     	; 0x324 <main+0x10>
	LED_init('A',i);
 31a:	6c 2f       	mov	r22, r28
 31c:	81 e4       	ldi	r24, 0x41	; 65
 31e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LED_init>
#include "BUTTON.h"
#include <util/delay.h>
int main(void)
{
    /* Replace with your application code */
	for (int i=0;i<8;i++){
 322:	21 96       	adiw	r28, 0x01	; 1
 324:	c8 30       	cpi	r28, 0x08	; 8
 326:	d1 05       	cpc	r29, r1
 328:	c4 f3       	brlt	.-16     	; 0x31a <main+0x6>
	LED_init('A',i);
	}
	BUTTON_init('C',0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	83 e4       	ldi	r24, 0x43	; 67
 32e:	0e 94 36 00 	call	0x6c	; 0x6c <BUTTON_init>
	LED_init('C',1);
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	83 e4       	ldi	r24, 0x43	; 67
 336:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LED_init>
	unsigned char flag;
    while (1) 
    {
		for (int i=0;i<8;i++){
 33a:	c0 e0       	ldi	r28, 0x00	; 0
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	1d c0       	rjmp	.+58     	; 0x37a <main+0x66>
			flag=BUTTON_read('C',0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	83 e4       	ldi	r24, 0x43	; 67
 344:	0e 94 3a 00 	call	0x74	; 0x74 <BUTTON_read>
			if(flag == 0){
 348:	81 11       	cpse	r24, r1
 34a:	05 c0       	rjmp	.+10     	; 0x356 <main+0x42>
				LED_on('C',1);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	83 e4       	ldi	r24, 0x43	; 67
 350:	0e 94 82 01 	call	0x304	; 0x304 <LED_on>
 354:	04 c0       	rjmp	.+8      	; 0x35e <main+0x4a>
			}else{
				LED_off('C',1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	83 e4       	ldi	r24, 0x43	; 67
 35a:	0e 94 86 01 	call	0x30c	; 0x30c <LED_off>
			}
			//while(flag!=1);
			LED_on('A',i);
 35e:	6c 2f       	mov	r22, r28
 360:	81 e4       	ldi	r24, 0x41	; 65
 362:	0e 94 82 01 	call	0x304	; 0x304 <LED_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	89 e6       	ldi	r24, 0x69	; 105
 36a:	98 e1       	ldi	r25, 0x18	; 24
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x58>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x62>
 376:	00 00       	nop
	BUTTON_init('C',0);
	LED_init('C',1);
	unsigned char flag;
    while (1) 
    {
		for (int i=0;i<8;i++){
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	c8 30       	cpi	r28, 0x08	; 8
 37c:	d1 05       	cpc	r29, r1
 37e:	04 f3       	brlt	.-64     	; 0x340 <main+0x2c>
 380:	c7 e0       	ldi	r28, 0x07	; 7
 382:	d0 e0       	ldi	r29, 0x00	; 0
 384:	1d c0       	rjmp	.+58     	; 0x3c0 <main+0xac>
			//while(flag!=1);
			LED_on('A',i);
			_delay_ms(1000);
		}
		for (int i=7;i>=0;i--){
			flag=BUTTON_read('C',0);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	83 e4       	ldi	r24, 0x43	; 67
 38a:	0e 94 3a 00 	call	0x74	; 0x74 <BUTTON_read>
			if(flag == 0){
 38e:	81 11       	cpse	r24, r1
 390:	05 c0       	rjmp	.+10     	; 0x39c <main+0x88>
				LED_on('C',1);
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	83 e4       	ldi	r24, 0x43	; 67
 396:	0e 94 82 01 	call	0x304	; 0x304 <LED_on>
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <main+0x90>
			}else{
			LED_off('C',1);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	83 e4       	ldi	r24, 0x43	; 67
 3a0:	0e 94 86 01 	call	0x30c	; 0x30c <LED_off>
		}
			//while(flag!=1);
			LED_off('A',i);
 3a4:	6c 2f       	mov	r22, r28
 3a6:	81 e4       	ldi	r24, 0x41	; 65
 3a8:	0e 94 86 01 	call	0x30c	; 0x30c <LED_off>
 3ac:	2f ef       	ldi	r18, 0xFF	; 255
 3ae:	89 e6       	ldi	r24, 0x69	; 105
 3b0:	98 e1       	ldi	r25, 0x18	; 24
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	90 40       	sbci	r25, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0x9e>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0xa8>
 3bc:	00 00       	nop
			}
			//while(flag!=1);
			LED_on('A',i);
			_delay_ms(1000);
		}
		for (int i=7;i>=0;i--){
 3be:	21 97       	sbiw	r28, 0x01	; 1
 3c0:	dd 23       	and	r29, r29
 3c2:	0c f7       	brge	.-62     	; 0x386 <main+0x72>
 3c4:	ba cf       	rjmp	.-140    	; 0x33a <main+0x26>

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
